$date
	Mon Aug 25 14:52:10 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_decoder_stage $end
$var wire 1 ! ds_o_stall $end
$var wire 32 " ds_o_pc [31:0] $end
$var wire 11 # ds_o_opcode [10:0] $end
$var wire 32 $ ds_o_imm [31:0] $end
$var wire 3 % ds_o_funct3 [2:0] $end
$var wire 1 & ds_o_flush $end
$var wire 4 ' ds_o_exception [3:0] $end
$var wire 1 ( ds_o_ce $end
$var wire 14 ) ds_o_alu [13:0] $end
$var wire 5 * ds_o_addr_rs2_p [4:0] $end
$var wire 5 + ds_o_addr_rs1_p [4:0] $end
$var wire 5 , ds_o_addr_rd_p [4:0] $end
$var wire 32 - ds_data_out_rs2 [31:0] $end
$var wire 32 . ds_data_out_rs1 [31:0] $end
$var parameter 32 / AWIDTH $end
$var parameter 37 0 DEPTH $end
$var parameter 32 1 DWIDTH $end
$var parameter 32 2 IWIDTH $end
$var parameter 32 3 PC_WIDTH $end
$var reg 1 4 ds_clk $end
$var reg 32 5 ds_data_in_rd [31:0] $end
$var reg 1 6 ds_i_ce $end
$var reg 1 7 ds_i_flush $end
$var reg 32 8 ds_i_instr [31:0] $end
$var reg 32 9 ds_i_pc [31:0] $end
$var reg 1 : ds_i_stall $end
$var reg 1 ; ds_rst $end
$var reg 1 < ds_we $end
$scope module uut $end
$var wire 1 4 ds_clk $end
$var wire 32 = ds_data_in_rd [31:0] $end
$var wire 1 6 ds_i_ce $end
$var wire 1 7 ds_i_flush $end
$var wire 32 > ds_i_instr [31:0] $end
$var wire 32 ? ds_i_pc [31:0] $end
$var wire 1 : ds_i_stall $end
$var wire 1 ; ds_rst $end
$var wire 1 < ds_we $end
$var wire 1 ! ds_o_stall $end
$var wire 32 @ ds_o_pc [31:0] $end
$var wire 11 A ds_o_opcode [10:0] $end
$var wire 32 B ds_o_imm [31:0] $end
$var wire 3 C ds_o_funct3 [2:0] $end
$var wire 1 & ds_o_flush $end
$var wire 4 D ds_o_exception [3:0] $end
$var wire 1 ( ds_o_ce $end
$var wire 14 E ds_o_alu [13:0] $end
$var wire 5 F ds_o_addr_rs2_p [4:0] $end
$var wire 5 G ds_o_addr_rs2 [4:0] $end
$var wire 5 H ds_o_addr_rs1_p [4:0] $end
$var wire 5 I ds_o_addr_rs1 [4:0] $end
$var wire 5 J ds_o_addr_rd_p [4:0] $end
$var wire 5 K ds_o_addr_rd [4:0] $end
$var wire 32 L ds_data_out_rs2 [31:0] $end
$var wire 32 M ds_data_out_rs1 [31:0] $end
$var parameter 32 N AWIDTH $end
$var parameter 32 O DWIDTH $end
$var parameter 32 P FUNCT_WIDTH $end
$var parameter 32 Q IWIDTH $end
$var parameter 32 R PC_WIDTH $end
$scope module d $end
$var wire 1 4 d_clk $end
$var wire 1 6 d_i_ce $end
$var wire 1 7 d_i_flush $end
$var wire 32 S d_i_instr [31:0] $end
$var wire 32 T d_i_pc [31:0] $end
$var wire 1 : d_i_stall $end
$var wire 5 U d_o_addr_rd [4:0] $end
$var wire 5 V d_o_addr_rs1 [4:0] $end
$var wire 5 W d_o_addr_rs2 [4:0] $end
$var wire 1 & d_o_flush $end
$var wire 1 ! d_o_stall $end
$var wire 1 ; d_rst $end
$var wire 1 X stall_bit $end
$var parameter 32 Y AWIDTH $end
$var parameter 32 Z DWIDTH $end
$var parameter 32 [ FUNCT_WIDTH $end
$var parameter 32 \ IWIDTH $end
$var parameter 32 ] PC_WIDTH $end
$var reg 1 ^ alu_add_d $end
$var reg 1 _ alu_and_d $end
$var reg 1 ` alu_eq_d $end
$var reg 1 a alu_ge_d $end
$var reg 1 b alu_geu_d $end
$var reg 1 c alu_lt_d $end
$var reg 1 d alu_ltu_d $end
$var reg 1 e alu_neq_d $end
$var reg 1 f alu_or_d $end
$var reg 1 g alu_sll_d $end
$var reg 1 h alu_slt_d $end
$var reg 1 i alu_sltu_d $end
$var reg 1 j alu_sra_d $end
$var reg 1 k alu_srl_d $end
$var reg 1 l alu_sub_d $end
$var reg 1 m alu_xor_d $end
$var reg 5 n d_o_addr_rd_p [4:0] $end
$var reg 5 o d_o_addr_rs1_p [4:0] $end
$var reg 5 p d_o_addr_rs2_p [4:0] $end
$var reg 14 q d_o_alu [13:0] $end
$var reg 1 ( d_o_ce $end
$var reg 4 r d_o_exception [3:0] $end
$var reg 3 s d_o_funct3 [2:0] $end
$var reg 32 t d_o_imm [31:0] $end
$var reg 11 u d_o_opcode [10:0] $end
$var reg 32 v d_o_pc [31:0] $end
$var reg 3 w funct3 [2:0] $end
$var reg 1 x illegal_check $end
$var reg 32 y imm_d [31:0] $end
$var reg 7 z opcode [6:0] $end
$var reg 1 { opcode_auipc_d $end
$var reg 1 | opcode_branch_d $end
$var reg 1 } opcode_fence_d $end
$var reg 1 ~ opcode_itype_d $end
$var reg 1 !" opcode_jal_d $end
$var reg 1 "" opcode_jalr_d $end
$var reg 1 #" opcode_load_word_d $end
$var reg 1 $" opcode_lui_d $end
$var reg 1 %" opcode_rtype_d $end
$var reg 1 &" opcode_store_word_d $end
$var reg 1 '" opcode_system_d $end
$var reg 1 (" system_exeption $end
$var reg 5 )" temp_addr_rd [4:0] $end
$var reg 5 *" temp_addr_rs1 [4:0] $end
$var reg 5 +" temp_addr_rs2 [4:0] $end
$var reg 1 ," valid_opcode $end
$upscope $end
$scope module re $end
$var wire 5 -" r_addr_rd [4:0] $end
$var wire 5 ." r_addr_rs_1 [4:0] $end
$var wire 5 /" r_addr_rs_2 [4:0] $end
$var wire 1 4 r_clk $end
$var wire 32 0" r_data_rd [31:0] $end
$var wire 1 ; r_rst $end
$var wire 1 1" r_wb $end
$var wire 1 < r_we $end
$var parameter 32 2" AWIDTH $end
$var parameter 32 3" DWIDTH $end
$var reg 32 4" r_data_out_rs1 [31:0] $end
$var reg 32 5" r_data_out_rs2 [31:0] $end
$var integer 32 6" i [31:0] $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 7" i [31:0] $end
$var integer 32 8" n [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 3"
b101 2"
b100000 ]
b100000 \
b11 [
b100000 Z
b101 Y
b100000 R
b100000 Q
b11 P
b100000 O
b101 N
b100000 3
b100000 2
b100000 1
b100000 0
b101 /
$end
#0
$dumpvars
b10 8"
b0 7"
b100000 6"
b0 5"
b0 4"
01"
b0 0"
b0 /"
b0 ."
b0 -"
0,"
b0 +"
b0 *"
b0 )"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
b0 z
b0 y
0x
b0 w
bx v
b0 u
bx t
bx s
b0 r
b0 q
b0 p
b0 o
b0 n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
1^
0X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
bx C
bx B
b0 A
bx @
b0 ?
b0 >
b0 =
0<
0;
0:
b0 9
b0 8
07
06
b0 5
04
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
0&
bx %
bx $
b0 #
bx "
0!
$end
#5
b100000 6"
b1 7"
14
#10
04
#15
1X
1!
b1 '
b1 D
b1 r
1;
b10 7"
14
#20
04
#25
1^
b1 K
b1 U
b1 )"
b10 I
b10 V
b10 *"
b11 G
b11 W
b11 +"
1,"
1%"
b110011 z
b11011110101011011011111011101111 5
b11011110101011011011111011101111 =
b11011110101011011011111011101111 0"
1<
b100 9
b100 ?
b100 T
b10001100010000000010110011 8
b10001100010000000010110011 >
b10001100010000000010110011 S
16
14
#30
04
#35
0X
0!
b0 '
b0 D
b0 r
b110011 #
b110011 A
b110011 u
14
#40
04
#45
11"
1(
b110011 #
b110011 A
b110011 u
b1 )
b1 E
b1 q
b0 $
b0 B
b0 t
b0 %
b0 C
b0 s
b1 ,
b1 J
b1 n
b1 -"
b11 *
b11 F
b11 p
b11 /"
b10 +
b10 H
b10 o
b10 ."
b100 "
b100 @
b100 v
14
