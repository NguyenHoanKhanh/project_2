$date
	Sun Aug 17 11:59:16 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_decoder_stage $end
$var wire 1 ! ds_o_stall $end
$var wire 32 " ds_o_pc [31:0] $end
$var wire 11 # ds_o_opcode [10:0] $end
$var wire 32 $ ds_o_imm [31:0] $end
$var wire 3 % ds_o_funct3 [2:0] $end
$var wire 1 & ds_o_flush $end
$var wire 4 ' ds_o_exception [3:0] $end
$var wire 1 ( ds_o_ce $end
$var wire 14 ) ds_o_alu [13:0] $end
$var wire 5 * ds_o_addr_rs2_p [4:0] $end
$var wire 5 + ds_o_addr_rs1_p [4:0] $end
$var wire 5 , ds_o_addr_rd_p [4:0] $end
$var wire 32 - ds_data_out_rs2 [31:0] $end
$var wire 32 . ds_data_out_rs1 [31:0] $end
$var parameter 32 / AWIDTH $end
$var parameter 32 0 CLK_PERIOD $end
$var parameter 37 1 DEPTH $end
$var parameter 32 2 DWIDTH $end
$var parameter 32 3 IWIDTH $end
$var parameter 32 4 PC_WIDTH $end
$var reg 1 5 ds_clk $end
$var reg 32 6 ds_data_in_rd [31:0] $end
$var reg 1 7 ds_i_ce $end
$var reg 1 8 ds_i_flush $end
$var reg 32 9 ds_i_instr [31:0] $end
$var reg 32 : ds_i_pc [31:0] $end
$var reg 1 ; ds_i_stall $end
$var reg 1 < ds_read_reg $end
$var reg 1 = ds_rst $end
$var reg 1 > ds_we $end
$scope module uut $end
$var wire 1 5 ds_clk $end
$var wire 32 ? ds_data_in_rd [31:0] $end
$var wire 1 7 ds_i_ce $end
$var wire 1 8 ds_i_flush $end
$var wire 32 @ ds_i_instr [31:0] $end
$var wire 32 A ds_i_pc [31:0] $end
$var wire 1 ; ds_i_stall $end
$var wire 1 = ds_rst $end
$var wire 1 > ds_we $end
$var wire 1 ! ds_o_stall $end
$var wire 32 B ds_o_pc [31:0] $end
$var wire 11 C ds_o_opcode [10:0] $end
$var wire 32 D ds_o_imm [31:0] $end
$var wire 3 E ds_o_funct3 [2:0] $end
$var wire 1 & ds_o_flush $end
$var wire 4 F ds_o_exception [3:0] $end
$var wire 1 ( ds_o_ce $end
$var wire 14 G ds_o_alu [13:0] $end
$var wire 5 H ds_o_addr_rs2_p [4:0] $end
$var wire 5 I ds_o_addr_rs2 [4:0] $end
$var wire 5 J ds_o_addr_rs1_p [4:0] $end
$var wire 5 K ds_o_addr_rs1 [4:0] $end
$var wire 5 L ds_o_addr_rd_p [4:0] $end
$var wire 5 M ds_o_addr_rd [4:0] $end
$var wire 32 N ds_data_out_rs2 [31:0] $end
$var wire 32 O ds_data_out_rs1 [31:0] $end
$var parameter 32 P AWIDTH $end
$var parameter 32 Q DWIDTH $end
$var parameter 32 R FUNCT_WIDTH $end
$var parameter 32 S IWIDTH $end
$var parameter 32 T PC_WIDTH $end
$scope module d $end
$var wire 1 5 d_clk $end
$var wire 1 7 d_i_ce $end
$var wire 1 8 d_i_flush $end
$var wire 32 U d_i_instr [31:0] $end
$var wire 32 V d_i_pc [31:0] $end
$var wire 1 ; d_i_stall $end
$var wire 5 W d_o_addr_rd [4:0] $end
$var wire 5 X d_o_addr_rs1 [4:0] $end
$var wire 5 Y d_o_addr_rs2 [4:0] $end
$var wire 1 & d_o_flush $end
$var wire 1 ! d_o_stall $end
$var wire 1 = d_rst $end
$var wire 1 Z stall_bit $end
$var parameter 32 [ AWIDTH $end
$var parameter 32 \ DWIDTH $end
$var parameter 32 ] FUNCT_WIDTH $end
$var parameter 32 ^ IWIDTH $end
$var parameter 32 _ PC_WIDTH $end
$var reg 1 ` alu_add_d $end
$var reg 1 a alu_and_d $end
$var reg 1 b alu_eq_d $end
$var reg 1 c alu_ge_d $end
$var reg 1 d alu_geu_d $end
$var reg 1 e alu_lt_d $end
$var reg 1 f alu_ltu_d $end
$var reg 1 g alu_neq_d $end
$var reg 1 h alu_or_d $end
$var reg 1 i alu_sll_d $end
$var reg 1 j alu_slt_d $end
$var reg 1 k alu_sltu_d $end
$var reg 1 l alu_sra_d $end
$var reg 1 m alu_srl_d $end
$var reg 1 n alu_sub_d $end
$var reg 1 o alu_xor_d $end
$var reg 5 p d_o_addr_rd_p [4:0] $end
$var reg 5 q d_o_addr_rs1_p [4:0] $end
$var reg 5 r d_o_addr_rs2_p [4:0] $end
$var reg 14 s d_o_alu [13:0] $end
$var reg 1 ( d_o_ce $end
$var reg 4 t d_o_exception [3:0] $end
$var reg 3 u d_o_funct3 [2:0] $end
$var reg 32 v d_o_imm [31:0] $end
$var reg 11 w d_o_opcode [10:0] $end
$var reg 32 x d_o_pc [31:0] $end
$var reg 3 y funct3 [2:0] $end
$var reg 1 z illegal_check $end
$var reg 32 { imm_d [31:0] $end
$var reg 7 | opcode [6:0] $end
$var reg 1 } opcode_auipc_d $end
$var reg 1 ~ opcode_branch_d $end
$var reg 1 !" opcode_fence_d $end
$var reg 1 "" opcode_itype_d $end
$var reg 1 #" opcode_jal_d $end
$var reg 1 $" opcode_jalr_d $end
$var reg 1 %" opcode_load_word_d $end
$var reg 1 &" opcode_lui_d $end
$var reg 1 '" opcode_rtype_d $end
$var reg 1 (" opcode_store_word_d $end
$var reg 1 )" opcode_system_d $end
$var reg 1 *" system_exeption $end
$var reg 5 +" temp_addr_rd [4:0] $end
$var reg 5 ," temp_addr_rs1 [4:0] $end
$var reg 5 -" temp_addr_rs2 [4:0] $end
$var reg 1 ." valid_opcode $end
$upscope $end
$scope module re $end
$var wire 5 /" r_addr_rd [4:0] $end
$var wire 5 0" r_addr_rs_1 [4:0] $end
$var wire 5 1" r_addr_rs_2 [4:0] $end
$var wire 1 5 r_clk $end
$var wire 32 2" r_data_rd [31:0] $end
$var wire 1 = r_rst $end
$var wire 1 3" r_wb $end
$var wire 1 > r_we $end
$var parameter 32 4" AWIDTH $end
$var parameter 32 5" DWIDTH $end
$var reg 32 6" r_data_out_rs1 [31:0] $end
$var reg 32 7" r_data_out_rs2 [31:0] $end
$var integer 32 8" i [31:0] $end
$upscope $end
$upscope $end
$scope task apply_and_capture $end
$var reg 32 9" instr [31:0] $end
$var reg 32 :" pc [31:0] $end
$upscope $end
$scope task do_read_regs $end
$upscope $end
$scope task do_writeback $end
$var reg 32 ;" data [31:0] $end
$upscope $end
$scope task print_state $end
$upscope $end
$scope task reset $end
$var integer 32 <" i [31:0] $end
$var integer 32 =" n [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 5"
b101 4"
b100000 _
b100000 ^
b11 ]
b100000 \
b101 [
b100000 T
b100000 S
b11 R
b100000 Q
b101 P
b100000 4
b100000 3
b100000 2
b100000 1
b1010 0
b101 /
$end
#0
$dumpvars
b10 ="
b0 <"
bx ;"
bx :"
bx 9"
b100000 8"
b0 7"
b0 6"
03"
b0 2"
b0 1"
b0 0"
b0 /"
0."
b0 -"
b0 ,"
b0 +"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
b0 |
b0 {
0z
b0 y
bx x
b0 w
bx v
bx u
b0 t
b0 s
b0 r
b0 q
b0 p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
1`
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
bx E
bx D
b0 C
bx B
b0 A
b0 @
b0 ?
0>
0=
0<
0;
b0 :
b0 9
08
07
b0 6
05
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
0&
bx %
bx $
b0 #
bx "
0!
$end
#5000
b100000 8"
b1 <"
15
#10000
05
#15000
1Z
1!
b1 '
b1 F
b1 t
1=
b10 <"
15
#20000
05
#25000
1`
b1 M
b1 W
b1 +"
1."
1'"
b110011 |
17
b100 :
b100 A
b100 V
b10110011 9
b10110011 @
b10110011 U
b100 :"
b10110011 9"
15
#30000
05
#35000
0Z
0!
b0 '
b0 F
b0 t
b110011 #
b110011 C
b110011 w
07
15
#40000
05
#45000
1>
b11011110101011011011111011101111 6
b11011110101011011011111011101111 ?
b11011110101011011011111011101111 2"
b11011110101011011011111011101111 ;"
15
#50000
05
#55000
1(
b110011 #
b110011 C
b110011 w
b1 )
b1 G
b1 s
b0 $
b0 D
b0 v
b0 %
b0 E
b0 u
b1 ,
b1 L
b1 p
b1 /"
b1000 "
b1000 B
b1000 x
1`
b1 K
b1 X
b1 ,"
b10 M
b10 W
b10 +"
17
b1000 :
b1000 A
b1000 V
b1000000100110011 9
b1000000100110011 @
b1000000100110011 U
b1000 :"
b1000000100110011 9"
b0 6
b0 ?
b0 2"
0>
15
#60000
05
#65000
0(
07
15
#70000
05
#75000
1<
15
#80000
05
#85000
0<
15
#90000
05
#95000
15
#100000
05
#105000
15
