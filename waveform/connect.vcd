$date
	Tue Aug 26 18:21:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! fi_o_instr_fetch [31:0] $end
$var wire 11 " ds_o_opcode [10:0] $end
$var wire 32 # ds_o_imm [31:0] $end
$var wire 3 $ ds_o_funct3 [2:0] $end
$var wire 14 % ds_o_alu [13:0] $end
$var wire 5 & ds_o_addr_rs2_p [4:0] $end
$var wire 5 ' ds_o_addr_rs1_p [4:0] $end
$var wire 5 ( ds_o_addr_rd_p [4:0] $end
$var wire 32 ) ds_data_out_rs2 [31:0] $end
$var wire 32 * ds_data_out_rs1 [31:0] $end
$var parameter 32 + AWIDTH $end
$var parameter 32 , AWIDTH_INSTR $end
$var parameter 32 - DEPTH $end
$var parameter 32 . DWIDTH $end
$var parameter 32 / FUNCT_WIDTH $end
$var parameter 32 0 IWIDTH $end
$var parameter 32 1 PC_WIDTH $end
$var reg 1 2 c_clk $end
$var reg 1 3 c_rst $end
$var reg 32 4 ds_data_in_rd [31:0] $end
$var reg 1 5 ds_we $end
$var reg 1 6 fi_i_ce $end
$var reg 1 7 fi_i_flush $end
$var reg 1 8 fi_i_stall $end
$var integer 32 9 i [31:0] $end
$scope module cn $end
$var wire 1 2 c_clk $end
$var wire 1 3 c_rst $end
$var wire 32 : ds_data_in_rd [31:0] $end
$var wire 1 5 ds_we $end
$var wire 32 ; fi_alu_pc_value [31:0] $end
$var wire 1 < fi_change_pc $end
$var wire 1 6 fi_i_ce $end
$var wire 1 7 fi_i_flush $end
$var wire 1 8 fi_i_stall $end
$var wire 32 = fi_pc [31:0] $end
$var wire 1 > fi_o_stall $end
$var wire 32 ? fi_o_instr_fetch [31:0] $end
$var wire 1 @ fi_o_flush $end
$var wire 1 A fi_o_ce $end
$var wire 32 B fi_o_addr_instr [31:0] $end
$var wire 1 C ds_o_stall $end
$var wire 32 D ds_o_pc [31:0] $end
$var wire 11 E ds_o_opcode [10:0] $end
$var wire 32 F ds_o_imm [31:0] $end
$var wire 3 G ds_o_funct3 [2:0] $end
$var wire 1 H ds_o_flush $end
$var wire 4 I ds_o_exception [3:0] $end
$var wire 1 J ds_o_ce $end
$var wire 14 K ds_o_alu [13:0] $end
$var wire 5 L ds_o_addr_rs2_p [4:0] $end
$var wire 5 M ds_o_addr_rs1_p [4:0] $end
$var wire 5 N ds_o_addr_rd_p [4:0] $end
$var wire 32 O ds_data_out_rs2 [31:0] $end
$var wire 32 P ds_data_out_rs1 [31:0] $end
$var parameter 32 Q AWIDTH $end
$var parameter 32 R AWIDTH_INSTR $end
$var parameter 32 S DEPTH $end
$var parameter 32 T DWIDTH $end
$var parameter 32 U FUNCT_WIDTH $end
$var parameter 32 V IWIDTH $end
$var parameter 32 W PC_WIDTH $end
$scope module ds $end
$var wire 1 2 ds_clk $end
$var wire 32 X ds_data_in_rd [31:0] $end
$var wire 1 3 ds_rst $end
$var wire 1 Y ds_we $end
$var wire 1 C ds_o_stall $end
$var wire 32 Z ds_o_pc [31:0] $end
$var wire 11 [ ds_o_opcode [10:0] $end
$var wire 32 \ ds_o_imm [31:0] $end
$var wire 3 ] ds_o_funct3 [2:0] $end
$var wire 1 H ds_o_flush $end
$var wire 4 ^ ds_o_exception [3:0] $end
$var wire 1 J ds_o_ce $end
$var wire 14 _ ds_o_alu [13:0] $end
$var wire 5 ` ds_o_addr_rs2_p [4:0] $end
$var wire 5 a ds_o_addr_rs2 [4:0] $end
$var wire 5 b ds_o_addr_rs1_p [4:0] $end
$var wire 5 c ds_o_addr_rs1 [4:0] $end
$var wire 5 d ds_o_addr_rd_p [4:0] $end
$var wire 5 e ds_o_addr_rd [4:0] $end
$var wire 1 > ds_i_stall $end
$var wire 32 f ds_i_pc [31:0] $end
$var wire 32 g ds_i_instr [31:0] $end
$var wire 1 @ ds_i_flush $end
$var wire 1 A ds_i_ce $end
$var wire 32 h ds_data_out_rs2 [31:0] $end
$var wire 32 i ds_data_out_rs1 [31:0] $end
$var parameter 32 j AWIDTH $end
$var parameter 32 k DWIDTH $end
$var parameter 32 l FUNCT_WIDTH $end
$var parameter 32 m IWIDTH $end
$var parameter 32 n PC_WIDTH $end
$scope module d $end
$var wire 1 2 d_clk $end
$var wire 5 o d_o_addr_rd [4:0] $end
$var wire 5 p d_o_addr_rs1 [4:0] $end
$var wire 5 q d_o_addr_rs2 [4:0] $end
$var wire 1 H d_o_flush $end
$var wire 1 C d_o_stall $end
$var wire 1 3 d_rst $end
$var wire 1 r stall_bit $end
$var wire 1 > d_i_stall $end
$var wire 32 s d_i_pc [31:0] $end
$var wire 32 t d_i_instr [31:0] $end
$var wire 1 @ d_i_flush $end
$var wire 1 A d_i_ce $end
$var parameter 32 u AWIDTH $end
$var parameter 32 v DWIDTH $end
$var parameter 32 w FUNCT_WIDTH $end
$var parameter 32 x IWIDTH $end
$var parameter 32 y PC_WIDTH $end
$var reg 1 z alu_add_d $end
$var reg 1 { alu_and_d $end
$var reg 1 | alu_eq_d $end
$var reg 1 } alu_ge_d $end
$var reg 1 ~ alu_geu_d $end
$var reg 1 !" alu_lt_d $end
$var reg 1 "" alu_ltu_d $end
$var reg 1 #" alu_neq_d $end
$var reg 1 $" alu_or_d $end
$var reg 1 %" alu_sll_d $end
$var reg 1 &" alu_slt_d $end
$var reg 1 '" alu_sltu_d $end
$var reg 1 (" alu_sra_d $end
$var reg 1 )" alu_srl_d $end
$var reg 1 *" alu_sub_d $end
$var reg 1 +" alu_xor_d $end
$var reg 5 ," d_o_addr_rd_p [4:0] $end
$var reg 5 -" d_o_addr_rs1_p [4:0] $end
$var reg 5 ." d_o_addr_rs2_p [4:0] $end
$var reg 14 /" d_o_alu [13:0] $end
$var reg 1 J d_o_ce $end
$var reg 4 0" d_o_exception [3:0] $end
$var reg 3 1" d_o_funct3 [2:0] $end
$var reg 32 2" d_o_imm [31:0] $end
$var reg 11 3" d_o_opcode [10:0] $end
$var reg 32 4" d_o_pc [31:0] $end
$var reg 3 5" funct3 [2:0] $end
$var reg 1 6" illegal_check $end
$var reg 32 7" imm_d [31:0] $end
$var reg 7 8" opcode [6:0] $end
$var reg 1 9" opcode_auipc_d $end
$var reg 1 :" opcode_branch_d $end
$var reg 1 ;" opcode_fence_d $end
$var reg 1 <" opcode_itype_d $end
$var reg 1 =" opcode_jal_d $end
$var reg 1 >" opcode_jalr_d $end
$var reg 1 ?" opcode_load_word_d $end
$var reg 1 @" opcode_lui_d $end
$var reg 1 A" opcode_rtype_d $end
$var reg 1 B" opcode_store_word_d $end
$var reg 1 C" opcode_system_d $end
$var reg 1 D" system_exeption $end
$var reg 5 E" temp_addr_rd [4:0] $end
$var reg 5 F" temp_addr_rs1 [4:0] $end
$var reg 5 G" temp_addr_rs2 [4:0] $end
$var reg 1 H" valid_opcode $end
$upscope $end
$scope module re $end
$var wire 5 I" r_addr_rd [4:0] $end
$var wire 5 J" r_addr_rs_1 [4:0] $end
$var wire 5 K" r_addr_rs_2 [4:0] $end
$var wire 1 2 r_clk $end
$var wire 32 L" r_data_rd [31:0] $end
$var wire 1 3 r_rst $end
$var wire 1 M" r_wb $end
$var wire 1 Y r_we $end
$var parameter 32 N" AWIDTH $end
$var parameter 32 O" DWIDTH $end
$var reg 32 P" r_data_out_rs1 [31:0] $end
$var reg 32 Q" r_data_out_rs2 [31:0] $end
$var integer 32 R" i [31:0] $end
$upscope $end
$upscope $end
$scope module fi $end
$var wire 32 S" fi_alu_pc_value [31:0] $end
$var wire 1 < fi_change_pc $end
$var wire 1 2 fi_clk $end
$var wire 1 6 fi_i_ce $end
$var wire 1 7 fi_i_flush $end
$var wire 1 8 fi_i_stall $end
$var wire 1 3 fi_rst $end
$var wire 32 T" fi_pc [31:0] $end
$var wire 1 > fi_o_stall $end
$var wire 32 U" fi_o_instr_mem [31:0] $end
$var wire 32 V" fi_o_instr_fetch [31:0] $end
$var wire 1 @ fi_o_flush $end
$var wire 1 A fi_o_ce $end
$var wire 32 W" fi_o_addr_instr [31:0] $end
$var wire 1 X" fi_o_ack $end
$var wire 1 Y" fi_i_syn $end
$var parameter 32 Z" AWIDTH_INSTR $end
$var parameter 32 [" DEPTH $end
$var parameter 32 \" IWIDTH $end
$var parameter 32 ]" PC_WIDTH $end
$scope module f $end
$var wire 32 ^" f_alu_pc_value [31:0] $end
$var wire 1 < f_change_pc $end
$var wire 1 2 f_clk $end
$var wire 1 6 f_i_ce $end
$var wire 1 7 f_i_flush $end
$var wire 1 8 f_i_stall $end
$var wire 1 3 f_rst $end
$var wire 1 _" stall $end
$var wire 32 `" f_i_instr [31:0] $end
$var wire 1 X" f_i_ack $end
$var parameter 32 a" AWIDTH_INSTR $end
$var parameter 32 b" IWIDTH $end
$var parameter 32 c" PC_WIDTH $end
$var reg 1 d" ce $end
$var reg 1 e" ce_d $end
$var reg 32 f" f_o_addr_instr [31:0] $end
$var reg 1 A f_o_ce $end
$var reg 1 @ f_o_flush $end
$var reg 32 g" f_o_instr [31:0] $end
$var reg 1 > f_o_stall $end
$var reg 1 Y" f_o_syn $end
$var reg 1 h" f_o_syn_r $end
$var reg 32 i" f_pc [31:0] $end
$var reg 1 j" init_done $end
$var reg 32 k" prev_pc [31:0] $end
$upscope $end
$scope module t $end
$var wire 1 2 t_clk $end
$var wire 1 Y" t_i_syn $end
$var wire 1 3 t_rst $end
$var parameter 32 l" DEPTH $end
$var parameter 32 m" DWIDTH $end
$var parameter 32 n" IWIDTH $end
$var reg 1 X" t_o_ack $end
$var reg 32 o" t_o_instr [31:0] $end
$var integer 32 p" counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 q" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 n"
b100000 m"
b100100 l"
b100000 c"
b100000 b"
b100000 a"
b100000 ]"
b100000 \"
b100100 ["
b100000 Z"
b100000 O"
b101 N"
b100000 y
b100000 x
b11 w
b100000 v
b101 u
b100000 n
b100000 m
b11 l
b100000 k
b101 j
b100000 W
b100000 V
b11 U
b100000 T
b100100 S
b100000 R
b101 Q
b100000 1
b100000 0
b11 /
b100000 .
b100100 -
b100000 ,
b101 +
$end
#0
$dumpvars
b10 q"
b0 p"
b0 o"
b0 k"
0j"
b0 i"
0h"
b0 g"
b0 f"
0e"
0d"
b0 `"
0_"
bz ^"
0Y"
0X"
b0 W"
b0 V"
b0 U"
b0 T"
bz S"
b100000 R"
b0 Q"
b0 P"
0M"
b0 L"
b0 K"
b0 J"
b0 I"
0H"
b0 G"
b0 F"
b0 E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
b0 8"
b0 7"
06"
b0 5"
bx 4"
b0 3"
bx 2"
bx 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
1z
b0 t
b0 s
0r
b0 q
b0 p
b0 o
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
bx ]
bx \
b0 [
bx Z
1Y
b0 X
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
0J
b0 I
0H
bx G
bx F
b0 E
bx D
0C
b0 B
0A
0@
b0 ?
0>
b0 =
z<
bz ;
b0 :
b0 9
08
07
06
05
b0 4
03
02
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
bx $
bx #
b0 "
b0 !
$end
#5
b100000 R"
12
#10
02
#15
1r
1_"
1C
b100 =
b100 f
b100 s
b100 T"
b100 i"
1h"
1Y"
1d"
1j"
b1 I
b1 ^
b1 0"
13
12
#20
02
#25
0_"
b1 p"
1X"
b1100010000000010110011 U"
b1100010000000010110011 `"
b1100010000000010110011 o"
16
12
#30
02
#35
1z
b1 e
b1 o
b1 E"
b10 c
b10 p
b10 F"
b11 a
b11 q
b11 G"
1H"
1A"
b110011 8"
b10 p"
b1000000011000101000001000110011 U"
b1000000011000101000001000110011 `"
b1000000011000101000001000110011 o"
1e"
b100 k"
b1100010000000010110011 !
b1100010000000010110011 ?
b1100010000000010110011 g
b1100010000000010110011 t
b1100010000000010110011 V"
b1100010000000010110011 g"
0Y"
15
12
#40
02
#45
0r
0C
1*"
0z
b100 e
b100 o
b100 E"
b110 a
b110 q
b110 G"
b101 c
b101 p
b101 F"
b0 I
b0 ^
b0 0"
b110011 "
b110011 E
b110011 [
b110011 3"
0h"
1A
b1000000011000101000001000110011 !
b1000000011000101000001000110011 ?
b1000000011000101000001000110011 g
b1000000011000101000001000110011 t
b1000000011000101000001000110011 V"
b1000000011000101000001000110011 g"
b100 B
b100 W"
b100 f"
0X"
b1 4
b1 :
b1 X
b1 L"
b1 9
12
#50
02
#55
1M"
b1000 =
b1000 f
b1000 s
b1000 T"
b1000 i"
1Y"
1J
b110011 "
b110011 E
b110011 [
b110011 3"
b10 %
b10 K
b10 _
b10 /"
b0 #
b0 F
b0 \
b0 2"
b0 $
b0 G
b0 ]
b0 1"
b100 (
b100 N
b100 d
b100 ,"
b100 I"
b110 &
b110 L
b110 `
b110 ."
b110 K"
b101 '
b101 M
b101 b
b101 -"
b101 J"
b100 D
b100 Z
b100 4"
b10 4
b10 :
b10 X
b10 L"
b10 9
12
#60
02
#65
b110 )
b110 O
b110 h
b110 Q"
b101 *
b101 P
b101 i
b101 P"
b110011 "
b110011 E
b110011 [
b110011 3"
b1000 D
b1000 Z
b1000 4"
1h"
b11 p"
1X"
b100101000010001110110011 U"
b100101000010001110110011 `"
b100101000010001110110011 o"
b11 4
b11 :
b11 X
b11 L"
b11 9
12
#70
02
#75
1&"
0*"
b10 5"
b111 e
b111 o
b111 E"
b1001 a
b1001 q
b1001 G"
b1000 c
b1000 p
b1000 F"
b100 p"
b110001011011010100110011 U"
b110001011011010100110011 `"
b110001011011010100110011 o"
b1000 k"
b100101000010001110110011 !
b100101000010001110110011 ?
b100101000010001110110011 g
b100101000010001110110011 t
b100101000010001110110011 V"
b100101000010001110110011 g"
0Y"
b110011 "
b110011 E
b110011 [
b110011 3"
b100 4
b100 :
b100 X
b100 L"
b100 9
12
#80
02
#85
1'"
0&"
b11 5"
b1010 e
b1010 o
b1010 E"
b1100 a
b1100 q
b1100 G"
b1011 c
b1011 p
b1011 F"
b110011 "
b110011 E
b110011 [
b110011 3"
b100 %
b100 K
b100 _
b100 /"
b10 $
b10 G
b10 ]
b10 1"
b111 (
b111 N
b111 d
b111 ,"
b111 I"
b1001 &
b1001 L
b1001 `
b1001 ."
b1001 K"
b1000 '
b1000 M
b1000 b
b1000 -"
b1000 J"
0h"
b110001011011010100110011 !
b110001011011010100110011 ?
b110001011011010100110011 g
b110001011011010100110011 t
b110001011011010100110011 V"
b110001011011010100110011 g"
b1000 B
b1000 W"
b1000 f"
0X"
05
b101 9
12
#90
02
#95
b1100 =
b1100 f
b1100 s
b1100 T"
b1100 i"
1Y"
b110011 "
b110011 E
b110011 [
b110011 3"
b1000 %
b1000 K
b1000 _
b1000 /"
b11 $
b11 G
b11 ]
b11 1"
b1010 (
b1010 N
b1010 d
b1010 ,"
b1010 I"
b1100 &
b1100 L
b1100 `
b1100 ."
b1100 K"
b1011 '
b1011 M
b1011 b
b1011 -"
b1011 J"
b1001 )
b1001 O
b1001 h
b1001 Q"
b1000 *
b1000 P
b1000 i
b1000 P"
12
#100
02
#105
b1100 )
b1100 O
b1100 h
b1100 Q"
b1011 *
b1011 P
b1011 i
b1011 P"
b110011 "
b110011 E
b110011 [
b110011 3"
b1100 D
b1100 Z
b1100 4"
1h"
b101 p"
1X"
b111101110100011010110011 U"
b111101110100011010110011 `"
b111101110100011010110011 o"
12
#110
02
#115
1+"
0'"
b100 5"
b1101 e
b1101 o
b1101 E"
b1111 a
b1111 q
b1111 G"
b1110 c
b1110 p
b1110 F"
b110 p"
b1001010001110100000110011 U"
b1001010001110100000110011 `"
b1001010001110100000110011 o"
b1100 k"
b111101110100011010110011 !
b111101110100011010110011 ?
b111101110100011010110011 g
b111101110100011010110011 t
b111101110100011010110011 V"
b111101110100011010110011 g"
0Y"
b110011 "
b110011 E
b110011 [
b110011 3"
12
