$date
	Sat Aug 16 00:55:11 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! fi_o_instr_fetch [31:0] $end
$var wire 11 " ds_o_opcode [10:0] $end
$var wire 32 # ds_o_imm [31:0] $end
$var wire 3 $ ds_o_funct3 [2:0] $end
$var wire 14 % ds_o_alu [13:0] $end
$var wire 5 & ds_o_addr_rs2_p [4:0] $end
$var wire 5 ' ds_o_addr_rs1_p [4:0] $end
$var wire 5 ( ds_o_addr_rd_p [4:0] $end
$var wire 32 ) ds_data_out_rs2 [31:0] $end
$var wire 32 * ds_data_out_rs1 [31:0] $end
$var parameter 32 + AWIDTH $end
$var parameter 32 , AWIDTH_INSTR $end
$var parameter 32 - DEPTH $end
$var parameter 32 . DWIDTH $end
$var parameter 32 / FUNCT_WIDTH $end
$var parameter 32 0 IWIDTH $end
$var parameter 32 1 PC_WIDTH $end
$var reg 1 2 c_clk $end
$var reg 1 3 c_rst $end
$var reg 32 4 ds_data_in_rd [31:0] $end
$var reg 1 5 ds_read_reg $end
$var reg 1 6 ds_we $end
$var reg 1 7 fi_i_ce $end
$var reg 1 8 fi_i_flush $end
$var reg 1 9 fi_i_stall $end
$var integer 32 : i [31:0] $end
$scope module cn $end
$var wire 1 2 c_clk $end
$var wire 1 3 c_rst $end
$var wire 32 ; ds_data_in_rd [31:0] $end
$var wire 1 5 ds_read_reg $end
$var wire 1 6 ds_we $end
$var wire 32 < fi_alu_pc_value [31:0] $end
$var wire 1 = fi_change_pc $end
$var wire 1 7 fi_i_ce $end
$var wire 1 8 fi_i_flush $end
$var wire 1 9 fi_i_stall $end
$var wire 32 > fi_pc [31:0] $end
$var wire 1 ? fi_o_stall $end
$var wire 32 @ fi_o_instr_fetch [31:0] $end
$var wire 1 A fi_o_flush $end
$var wire 1 B fi_o_ce $end
$var wire 32 C fi_o_addr_instr [31:0] $end
$var wire 1 D ds_o_stall $end
$var wire 32 E ds_o_pc [31:0] $end
$var wire 11 F ds_o_opcode [10:0] $end
$var wire 32 G ds_o_imm [31:0] $end
$var wire 3 H ds_o_funct3 [2:0] $end
$var wire 1 I ds_o_flush $end
$var wire 4 J ds_o_exception [3:0] $end
$var wire 1 K ds_o_ce $end
$var wire 14 L ds_o_alu [13:0] $end
$var wire 5 M ds_o_addr_rs2_p [4:0] $end
$var wire 5 N ds_o_addr_rs1_p [4:0] $end
$var wire 5 O ds_o_addr_rd_p [4:0] $end
$var wire 32 P ds_data_out_rs2 [31:0] $end
$var wire 32 Q ds_data_out_rs1 [31:0] $end
$var parameter 32 R AWIDTH $end
$var parameter 32 S AWIDTH_INSTR $end
$var parameter 32 T DEPTH $end
$var parameter 32 U DWIDTH $end
$var parameter 32 V FUNCT_WIDTH $end
$var parameter 32 W IWIDTH $end
$var parameter 32 X PC_WIDTH $end
$scope module ds $end
$var wire 1 2 ds_clk $end
$var wire 32 Y ds_data_in_rd [31:0] $end
$var wire 1 5 ds_read_reg $end
$var wire 1 3 ds_rst $end
$var wire 1 6 ds_we $end
$var wire 1 D ds_o_stall $end
$var wire 32 Z ds_o_pc [31:0] $end
$var wire 11 [ ds_o_opcode [10:0] $end
$var wire 32 \ ds_o_imm [31:0] $end
$var wire 3 ] ds_o_funct3 [2:0] $end
$var wire 1 I ds_o_flush $end
$var wire 4 ^ ds_o_exception [3:0] $end
$var wire 1 K ds_o_ce $end
$var wire 14 _ ds_o_alu [13:0] $end
$var wire 5 ` ds_o_addr_rs2_p [4:0] $end
$var wire 5 a ds_o_addr_rs2 [4:0] $end
$var wire 5 b ds_o_addr_rs1_p [4:0] $end
$var wire 5 c ds_o_addr_rs1 [4:0] $end
$var wire 5 d ds_o_addr_rd_p [4:0] $end
$var wire 5 e ds_o_addr_rd [4:0] $end
$var wire 1 ? ds_i_stall $end
$var wire 32 f ds_i_pc [31:0] $end
$var wire 32 g ds_i_instr [31:0] $end
$var wire 1 A ds_i_flush $end
$var wire 1 B ds_i_ce $end
$var wire 32 h ds_data_out_rs2 [31:0] $end
$var wire 32 i ds_data_out_rs1 [31:0] $end
$var parameter 32 j AWIDTH $end
$var parameter 32 k DWIDTH $end
$var parameter 32 l FUNCT_WIDTH $end
$var parameter 32 m IWIDTH $end
$var parameter 32 n PC_WIDTH $end
$scope module d $end
$var wire 1 2 d_clk $end
$var wire 5 o d_o_addr_rd [4:0] $end
$var wire 5 p d_o_addr_rs1 [4:0] $end
$var wire 5 q d_o_addr_rs2 [4:0] $end
$var wire 1 3 d_rst $end
$var wire 1 r stall_bit $end
$var wire 1 ? d_i_stall $end
$var wire 32 s d_i_pc [31:0] $end
$var wire 32 t d_i_instr [31:0] $end
$var wire 1 A d_i_flush $end
$var wire 1 B d_i_ce $end
$var parameter 32 u AWIDTH $end
$var parameter 32 v DWIDTH $end
$var parameter 32 w FUNCT_WIDTH $end
$var parameter 32 x IWIDTH $end
$var parameter 32 y PC_WIDTH $end
$var reg 1 z alu_add_d $end
$var reg 1 { alu_and_d $end
$var reg 1 | alu_eq_d $end
$var reg 1 } alu_ge_d $end
$var reg 1 ~ alu_geu_d $end
$var reg 1 !" alu_lt_d $end
$var reg 1 "" alu_ltu_d $end
$var reg 1 #" alu_neq_d $end
$var reg 1 $" alu_or_d $end
$var reg 1 %" alu_sll_d $end
$var reg 1 &" alu_slt_d $end
$var reg 1 '" alu_sltu_d $end
$var reg 1 (" alu_sra_d $end
$var reg 1 )" alu_srl_d $end
$var reg 1 *" alu_sub_d $end
$var reg 1 +" alu_xor_d $end
$var reg 5 ," d_o_addr_rd_p [4:0] $end
$var reg 5 -" d_o_addr_rs1_p [4:0] $end
$var reg 5 ." d_o_addr_rs2_p [4:0] $end
$var reg 14 /" d_o_alu [13:0] $end
$var reg 1 K d_o_ce $end
$var reg 4 0" d_o_exception [3:0] $end
$var reg 1 I d_o_flush $end
$var reg 3 1" d_o_funct3 [2:0] $end
$var reg 32 2" d_o_imm [31:0] $end
$var reg 11 3" d_o_opcode [10:0] $end
$var reg 32 4" d_o_pc [31:0] $end
$var reg 1 D d_o_stall $end
$var reg 3 5" funct3 [2:0] $end
$var reg 1 6" illegal_check $end
$var reg 32 7" imm_d [31:0] $end
$var reg 7 8" opcode [6:0] $end
$var reg 1 9" opcode_auipc_d $end
$var reg 1 :" opcode_branch_d $end
$var reg 1 ;" opcode_fence_d $end
$var reg 1 <" opcode_itype_d $end
$var reg 1 =" opcode_jal_d $end
$var reg 1 >" opcode_jalr_d $end
$var reg 1 ?" opcode_load_word_d $end
$var reg 1 @" opcode_lui_d $end
$var reg 1 A" opcode_rtype_d $end
$var reg 1 B" opcode_store_word_d $end
$var reg 1 C" opcode_system_d $end
$var reg 1 D" system_exeption $end
$var reg 5 E" temp_addr_rd [4:0] $end
$var reg 5 F" temp_addr_rs1 [4:0] $end
$var reg 5 G" temp_addr_rs2 [4:0] $end
$var reg 1 H" valid_opcode $end
$upscope $end
$scope module re $end
$var wire 5 I" r_addr_rd [4:0] $end
$var wire 5 J" r_addr_rs_1 [4:0] $end
$var wire 5 K" r_addr_rs_2 [4:0] $end
$var wire 1 2 r_clk $end
$var wire 32 L" r_data_rd [31:0] $end
$var wire 1 5 r_read_reg $end
$var wire 1 3 r_rst $end
$var wire 1 M" r_wb $end
$var wire 1 6 r_we $end
$var parameter 32 N" AWIDTH $end
$var parameter 32 O" DWIDTH $end
$var reg 32 P" r_data_out_rs1 [31:0] $end
$var reg 32 Q" r_data_out_rs2 [31:0] $end
$var integer 32 R" i [31:0] $end
$upscope $end
$upscope $end
$scope module fi $end
$var wire 32 S" fi_alu_pc_value [31:0] $end
$var wire 1 = fi_change_pc $end
$var wire 1 2 fi_clk $end
$var wire 1 7 fi_i_ce $end
$var wire 1 8 fi_i_flush $end
$var wire 1 9 fi_i_stall $end
$var wire 1 3 fi_rst $end
$var wire 32 T" fi_pc [31:0] $end
$var wire 1 ? fi_o_stall $end
$var wire 32 U" fi_o_instr_mem [31:0] $end
$var wire 32 V" fi_o_instr_fetch [31:0] $end
$var wire 1 A fi_o_flush $end
$var wire 1 B fi_o_ce $end
$var wire 32 W" fi_o_addr_instr [31:0] $end
$var wire 1 X" fi_o_ack $end
$var wire 1 Y" fi_i_syn $end
$var parameter 32 Z" AWIDTH_INSTR $end
$var parameter 32 [" DEPTH $end
$var parameter 32 \" IWIDTH $end
$var parameter 32 ]" PC_WIDTH $end
$scope module f $end
$var wire 32 ^" f_alu_pc_value [31:0] $end
$var wire 1 = f_change_pc $end
$var wire 1 2 f_clk $end
$var wire 1 7 f_i_ce $end
$var wire 1 8 f_i_flush $end
$var wire 1 9 f_i_stall $end
$var wire 1 3 f_rst $end
$var wire 1 _" stall $end
$var wire 32 `" f_i_instr [31:0] $end
$var wire 1 X" f_i_ack $end
$var parameter 32 a" AWIDTH_INSTR $end
$var parameter 32 b" IWIDTH $end
$var parameter 32 c" PC_WIDTH $end
$var reg 1 d" ce $end
$var reg 1 e" ce_d $end
$var reg 32 f" f_o_addr_instr [31:0] $end
$var reg 1 B f_o_ce $end
$var reg 1 A f_o_flush $end
$var reg 32 g" f_o_instr [31:0] $end
$var reg 1 ? f_o_stall $end
$var reg 1 Y" f_o_syn $end
$var reg 1 h" f_o_syn_r $end
$var reg 32 i" f_pc [31:0] $end
$var reg 32 j" i_addr_instr [31:0] $end
$var reg 32 k" prev_pc [31:0] $end
$upscope $end
$scope module t $end
$var wire 1 2 t_clk $end
$var wire 1 Y" t_i_syn $end
$var wire 1 3 t_rst $end
$var parameter 32 l" DEPTH $end
$var parameter 32 m" IWIDTH $end
$var reg 1 n" accept $end
$var reg 1 X" t_o_ack $end
$var reg 32 o" t_o_instr [31:0] $end
$var integer 32 p" counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 q" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 m"
b100100 l"
b100000 c"
b100000 b"
b100000 a"
b100000 ]"
b100000 \"
b100100 ["
b100000 Z"
b100000 O"
b101 N"
b100000 y
b100000 x
b11 w
b100000 v
b101 u
b100000 n
b100000 m
b11 l
b100000 k
b101 j
b100000 X
b100000 W
b11 V
b100000 U
b100100 T
b100000 S
b101 R
b100000 1
b100000 0
b11 /
b100000 .
b100100 -
b100000 ,
b101 +
$end
#0
$dumpvars
b10 q"
b0 p"
b0 o"
0n"
b0 k"
b0 j"
b0 i"
0h"
b0 g"
b0 f"
0e"
0d"
b0 `"
0_"
bz ^"
xY"
0X"
b0 W"
b0 V"
b0 U"
b0 T"
bz S"
b100000 R"
b0 Q"
b0 P"
0M"
b0 L"
b0 K"
b0 J"
b0 I"
0H"
bx G"
bx F"
bx E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
bx 8"
b0 7"
06"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
b0 ."
b0 -"
b0 ,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
1z
b0 t
b0 s
0r
bx q
bx p
bx o
b0 i
b0 h
b0 g
b0 f
bx e
b0 d
bx c
b0 b
bx a
b0 `
bx _
bx ^
bx ]
bx \
bx [
bx Z
b0 Y
b0 Q
b0 P
b0 O
b0 N
b0 M
bx L
0K
bx J
0I
bx H
bx G
bx F
bx E
0D
b0 C
0B
0A
b0 @
0?
b0 >
z=
bz <
b0 ;
b0 :
09
08
07
06
05
b0 4
03
02
b0 *
b0 )
b0 (
b0 '
b0 &
bx %
bx $
bx #
bx "
b0 !
$end
#5
b0 e
b0 o
b0 E"
b0 c
b0 p
b0 F"
b0 a
b0 q
b0 G"
b100000 R"
12
#10
02
#15
x_"
xh"
0Y"
b1 J
b1 ^
b1 0"
b0xxxxxxx "
b0xxxxxxx F
b0xxxxxxx [
b0xxxxxxx 3"
13
12
#20
02
#25
0_"
1d"
0h"
16
17
12
#30
02
#35
1Y"
b1 4
b1 ;
b1 Y
b1 L"
b1 :
12
#40
02
#45
1h"
b1 p"
1n"
1X"
b1100010000000010110011 U"
b1100010000000010110011 `"
b1100010000000010110011 o"
b10 4
b10 ;
b10 Y
b10 L"
b10 :
12
#50
02
#55
1_"
bx 7"
1z
b1 e
b1 o
b1 E"
b10 c
b10 p
b10 F"
b11 a
b11 q
b11 G"
1H"
1A"
b0 5"
b110011 8"
0X"
1e"
b100 >
b100 f
b100 s
b100 T"
b100 i"
b1100010000000010110011 !
b1100010000000010110011 @
b1100010000000010110011 g
b1100010000000010110011 t
b1100010000000010110011 V"
b1100010000000010110011 g"
b11 4
b11 ;
b11 Y
b11 L"
b11 :
12
#60
02
#65
b0 J
b0 ^
b0 0"
b110011 "
b110011 F
b110011 [
b110011 3"
b100 4
b100 ;
b100 Y
b100 L"
b100 :
12
#70
02
#75
06
b0 :
12
#80
02
#85
b1 :
15
12
#90
02
#95
b10 :
12
#100
02
#105
b11 :
12
#110
02
#115
b100 :
12
#120
02
#125
05
b101 :
12
#130
02
#135
12
#140
02
#145
12
#150
02
#155
12
#160
02
#165
12
#170
02
#175
12
#180
02
#185
12
#190
02
#195
12
#200
02
#205
12
#210
02
#215
12
#220
02
#225
12
#230
02
#235
12
#240
02
#245
12
#250
02
#255
12
#260
02
#265
12
#270
02
#275
12
#280
02
#285
12
#290
02
#295
12
#300
02
#305
12
#310
02
#315
12
#320
02
#325
12
#330
02
#335
12
#340
02
#345
12
#350
02
#355
12
#360
02
#365
12
#370
02
#375
12
#380
02
#385
12
#390
02
#395
12
#400
02
#405
12
#410
02
#415
12
#420
02
#425
12
#430
02
#435
12
#440
02
#445
12
#450
02
#455
12
#460
02
#465
12
#470
02
#475
12
#480
02
#485
12
#490
02
#495
12
#500
02
#505
12
#510
02
#515
12
#520
02
#525
12
#530
02
#535
12
#540
02
#545
12
#550
02
#555
12
#560
02
#565
12
#570
02
#575
12
#580
02
#585
12
#590
02
#595
12
#600
02
#605
12
#610
02
#615
12
#620
02
#625
12
#630
02
#635
12
#640
02
#645
12
#650
02
#655
12
#660
02
#665
12
#670
02
#675
12
#680
02
#685
12
