$date
	Mon Aug 25 14:57:53 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! fi_o_instr_fetch [31:0] $end
$var wire 11 " ds_o_opcode [10:0] $end
$var wire 32 # ds_o_imm [31:0] $end
$var wire 3 $ ds_o_funct3 [2:0] $end
$var wire 14 % ds_o_alu [13:0] $end
$var wire 5 & ds_o_addr_rs2_p [4:0] $end
$var wire 5 ' ds_o_addr_rs1_p [4:0] $end
$var wire 5 ( ds_o_addr_rd_p [4:0] $end
$var wire 32 ) ds_data_out_rs2 [31:0] $end
$var wire 32 * ds_data_out_rs1 [31:0] $end
$var parameter 32 + AWIDTH $end
$var parameter 32 , AWIDTH_INSTR $end
$var parameter 32 - DEPTH $end
$var parameter 32 . DWIDTH $end
$var parameter 32 / FUNCT_WIDTH $end
$var parameter 32 0 IWIDTH $end
$var parameter 32 1 PC_WIDTH $end
$var reg 1 2 c_clk $end
$var reg 1 3 c_rst $end
$var reg 32 4 ds_data_in_rd [31:0] $end
$var reg 1 5 ds_we $end
$var reg 1 6 fi_i_ce $end
$var reg 1 7 fi_i_flush $end
$var reg 1 8 fi_i_stall $end
$var integer 32 9 i [31:0] $end
$scope module cn $end
$var wire 1 2 c_clk $end
$var wire 1 3 c_rst $end
$var wire 32 : ds_data_in_rd [31:0] $end
$var wire 1 5 ds_we $end
$var wire 32 ; fi_alu_pc_value [31:0] $end
$var wire 1 < fi_change_pc $end
$var wire 1 6 fi_i_ce $end
$var wire 1 7 fi_i_flush $end
$var wire 1 8 fi_i_stall $end
$var wire 32 = fi_pc [31:0] $end
$var wire 1 > fi_o_stall $end
$var wire 32 ? fi_o_instr_fetch [31:0] $end
$var wire 1 @ fi_o_flush $end
$var wire 1 A fi_o_ce $end
$var wire 32 B fi_o_addr_instr [31:0] $end
$var wire 1 C ds_o_stall $end
$var wire 32 D ds_o_pc [31:0] $end
$var wire 11 E ds_o_opcode [10:0] $end
$var wire 32 F ds_o_imm [31:0] $end
$var wire 3 G ds_o_funct3 [2:0] $end
$var wire 1 H ds_o_flush $end
$var wire 4 I ds_o_exception [3:0] $end
$var wire 1 J ds_o_ce $end
$var wire 14 K ds_o_alu [13:0] $end
$var wire 5 L ds_o_addr_rs2_p [4:0] $end
$var wire 5 M ds_o_addr_rs1_p [4:0] $end
$var wire 5 N ds_o_addr_rd_p [4:0] $end
$var wire 32 O ds_data_out_rs2 [31:0] $end
$var wire 32 P ds_data_out_rs1 [31:0] $end
$var parameter 32 Q AWIDTH $end
$var parameter 32 R AWIDTH_INSTR $end
$var parameter 32 S DEPTH $end
$var parameter 32 T DWIDTH $end
$var parameter 32 U FUNCT_WIDTH $end
$var parameter 32 V IWIDTH $end
$var parameter 32 W PC_WIDTH $end
$scope module ds $end
$var wire 1 2 ds_clk $end
$var wire 32 X ds_data_in_rd [31:0] $end
$var wire 1 3 ds_rst $end
$var wire 1 5 ds_we $end
$var wire 1 C ds_o_stall $end
$var wire 32 Y ds_o_pc [31:0] $end
$var wire 11 Z ds_o_opcode [10:0] $end
$var wire 32 [ ds_o_imm [31:0] $end
$var wire 3 \ ds_o_funct3 [2:0] $end
$var wire 1 H ds_o_flush $end
$var wire 4 ] ds_o_exception [3:0] $end
$var wire 1 J ds_o_ce $end
$var wire 14 ^ ds_o_alu [13:0] $end
$var wire 5 _ ds_o_addr_rs2_p [4:0] $end
$var wire 5 ` ds_o_addr_rs2 [4:0] $end
$var wire 5 a ds_o_addr_rs1_p [4:0] $end
$var wire 5 b ds_o_addr_rs1 [4:0] $end
$var wire 5 c ds_o_addr_rd_p [4:0] $end
$var wire 5 d ds_o_addr_rd [4:0] $end
$var wire 1 > ds_i_stall $end
$var wire 32 e ds_i_pc [31:0] $end
$var wire 32 f ds_i_instr [31:0] $end
$var wire 1 @ ds_i_flush $end
$var wire 1 A ds_i_ce $end
$var wire 32 g ds_data_out_rs2 [31:0] $end
$var wire 32 h ds_data_out_rs1 [31:0] $end
$var parameter 32 i AWIDTH $end
$var parameter 32 j DWIDTH $end
$var parameter 32 k FUNCT_WIDTH $end
$var parameter 32 l IWIDTH $end
$var parameter 32 m PC_WIDTH $end
$scope module d $end
$var wire 1 2 d_clk $end
$var wire 5 n d_o_addr_rd [4:0] $end
$var wire 5 o d_o_addr_rs1 [4:0] $end
$var wire 5 p d_o_addr_rs2 [4:0] $end
$var wire 1 H d_o_flush $end
$var wire 1 C d_o_stall $end
$var wire 1 3 d_rst $end
$var wire 1 q stall_bit $end
$var wire 1 > d_i_stall $end
$var wire 32 r d_i_pc [31:0] $end
$var wire 32 s d_i_instr [31:0] $end
$var wire 1 @ d_i_flush $end
$var wire 1 A d_i_ce $end
$var parameter 32 t AWIDTH $end
$var parameter 32 u DWIDTH $end
$var parameter 32 v FUNCT_WIDTH $end
$var parameter 32 w IWIDTH $end
$var parameter 32 x PC_WIDTH $end
$var reg 1 y alu_add_d $end
$var reg 1 z alu_and_d $end
$var reg 1 { alu_eq_d $end
$var reg 1 | alu_ge_d $end
$var reg 1 } alu_geu_d $end
$var reg 1 ~ alu_lt_d $end
$var reg 1 !" alu_ltu_d $end
$var reg 1 "" alu_neq_d $end
$var reg 1 #" alu_or_d $end
$var reg 1 $" alu_sll_d $end
$var reg 1 %" alu_slt_d $end
$var reg 1 &" alu_sltu_d $end
$var reg 1 '" alu_sra_d $end
$var reg 1 (" alu_srl_d $end
$var reg 1 )" alu_sub_d $end
$var reg 1 *" alu_xor_d $end
$var reg 5 +" d_o_addr_rd_p [4:0] $end
$var reg 5 ," d_o_addr_rs1_p [4:0] $end
$var reg 5 -" d_o_addr_rs2_p [4:0] $end
$var reg 14 ." d_o_alu [13:0] $end
$var reg 1 J d_o_ce $end
$var reg 4 /" d_o_exception [3:0] $end
$var reg 3 0" d_o_funct3 [2:0] $end
$var reg 32 1" d_o_imm [31:0] $end
$var reg 11 2" d_o_opcode [10:0] $end
$var reg 32 3" d_o_pc [31:0] $end
$var reg 3 4" funct3 [2:0] $end
$var reg 1 5" illegal_check $end
$var reg 32 6" imm_d [31:0] $end
$var reg 7 7" opcode [6:0] $end
$var reg 1 8" opcode_auipc_d $end
$var reg 1 9" opcode_branch_d $end
$var reg 1 :" opcode_fence_d $end
$var reg 1 ;" opcode_itype_d $end
$var reg 1 <" opcode_jal_d $end
$var reg 1 =" opcode_jalr_d $end
$var reg 1 >" opcode_load_word_d $end
$var reg 1 ?" opcode_lui_d $end
$var reg 1 @" opcode_rtype_d $end
$var reg 1 A" opcode_store_word_d $end
$var reg 1 B" opcode_system_d $end
$var reg 1 C" system_exeption $end
$var reg 5 D" temp_addr_rd [4:0] $end
$var reg 5 E" temp_addr_rs1 [4:0] $end
$var reg 5 F" temp_addr_rs2 [4:0] $end
$var reg 1 G" valid_opcode $end
$upscope $end
$scope module re $end
$var wire 5 H" r_addr_rd [4:0] $end
$var wire 5 I" r_addr_rs_1 [4:0] $end
$var wire 5 J" r_addr_rs_2 [4:0] $end
$var wire 1 2 r_clk $end
$var wire 32 K" r_data_rd [31:0] $end
$var wire 1 3 r_rst $end
$var wire 1 L" r_wb $end
$var wire 1 5 r_we $end
$var parameter 32 M" AWIDTH $end
$var parameter 32 N" DWIDTH $end
$var reg 32 O" r_data_out_rs1 [31:0] $end
$var reg 32 P" r_data_out_rs2 [31:0] $end
$var integer 32 Q" i [31:0] $end
$upscope $end
$upscope $end
$scope module fi $end
$var wire 32 R" fi_alu_pc_value [31:0] $end
$var wire 1 < fi_change_pc $end
$var wire 1 2 fi_clk $end
$var wire 1 6 fi_i_ce $end
$var wire 1 7 fi_i_flush $end
$var wire 1 8 fi_i_stall $end
$var wire 1 3 fi_rst $end
$var wire 32 S" fi_pc [31:0] $end
$var wire 1 > fi_o_stall $end
$var wire 32 T" fi_o_instr_mem [31:0] $end
$var wire 32 U" fi_o_instr_fetch [31:0] $end
$var wire 1 @ fi_o_flush $end
$var wire 1 A fi_o_ce $end
$var wire 32 V" fi_o_addr_instr [31:0] $end
$var wire 1 W" fi_o_ack $end
$var wire 1 X" fi_i_syn $end
$var parameter 32 Y" AWIDTH_INSTR $end
$var parameter 32 Z" DEPTH $end
$var parameter 32 [" IWIDTH $end
$var parameter 32 \" PC_WIDTH $end
$scope module f $end
$var wire 32 ]" f_alu_pc_value [31:0] $end
$var wire 1 < f_change_pc $end
$var wire 1 2 f_clk $end
$var wire 1 6 f_i_ce $end
$var wire 1 7 f_i_flush $end
$var wire 1 8 f_i_stall $end
$var wire 1 3 f_rst $end
$var wire 1 ^" stall $end
$var wire 32 _" f_i_instr [31:0] $end
$var wire 1 W" f_i_ack $end
$var parameter 32 `" AWIDTH_INSTR $end
$var parameter 32 a" IWIDTH $end
$var parameter 32 b" PC_WIDTH $end
$var reg 1 c" ce $end
$var reg 1 d" ce_d $end
$var reg 32 e" f_o_addr_instr [31:0] $end
$var reg 1 A f_o_ce $end
$var reg 1 @ f_o_flush $end
$var reg 32 f" f_o_instr [31:0] $end
$var reg 1 > f_o_stall $end
$var reg 1 X" f_o_syn $end
$var reg 1 g" f_o_syn_r $end
$var reg 32 h" f_pc [31:0] $end
$var reg 1 i" init_done $end
$var reg 32 j" prev_pc [31:0] $end
$upscope $end
$scope module t $end
$var wire 1 2 t_clk $end
$var wire 1 X" t_i_syn $end
$var wire 1 3 t_rst $end
$var parameter 32 k" DEPTH $end
$var parameter 32 l" IWIDTH $end
$var reg 1 W" t_o_ack $end
$var reg 32 m" t_o_instr [31:0] $end
$var integer 32 n" counter [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope task reset $end
$var integer 32 o" counter [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 l"
b100100 k"
b100000 b"
b100000 a"
b100000 `"
b100000 \"
b100000 ["
b100100 Z"
b100000 Y"
b100000 N"
b101 M"
b100000 x
b100000 w
b11 v
b100000 u
b101 t
b100000 m
b100000 l
b11 k
b100000 j
b101 i
b100000 W
b100000 V
b11 U
b100000 T
b100100 S
b100000 R
b101 Q
b100000 1
b100000 0
b11 /
b100000 .
b100100 -
b100000 ,
b101 +
$end
#0
$dumpvars
b10 o"
b0 n"
b0 m"
b0 j"
0i"
b0 h"
0g"
b0 f"
b0 e"
0d"
0c"
b0 _"
0^"
bz ]"
0X"
0W"
b0 V"
b0 U"
b0 T"
b0 S"
bz R"
b100000 Q"
b0 P"
b0 O"
0L"
b0 K"
b0 J"
b0 I"
b0 H"
0G"
b0 F"
b0 E"
b0 D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
b0 7"
b0 6"
05"
b0 4"
bx 3"
b0 2"
bx 1"
bx 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
1y
b0 s
b0 r
0q
b0 p
b0 o
b0 n
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
bx \
bx [
b0 Z
bx Y
b0 X
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
0J
b0 I
0H
bx G
bx F
b0 E
bx D
0C
b0 B
0A
0@
b0 ?
0>
b0 =
z<
bz ;
b0 :
b0 9
08
07
06
05
b0 4
03
02
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
bx $
bx #
b0 "
b0 !
$end
#5
b100000 Q"
12
#10
02
#15
1q
1^"
1C
b100 =
b100 e
b100 r
b100 S"
b100 h"
1g"
1X"
1c"
1i"
b1 I
b1 ]
b1 /"
13
12
#20
02
#25
0^"
b1 n"
1W"
b1100010000000010110011 T"
b1100010000000010110011 _"
b1100010000000010110011 m"
16
12
#30
02
#35
1y
b1 d
b1 n
b1 D"
b10 b
b10 o
b10 E"
b11 `
b11 p
b11 F"
1G"
1@"
b110011 7"
b10 n"
b1000000011000101000001000110011 T"
b1000000011000101000001000110011 _"
b1000000011000101000001000110011 m"
1d"
b100 j"
b1100010000000010110011 !
b1100010000000010110011 ?
b1100010000000010110011 f
b1100010000000010110011 s
b1100010000000010110011 U"
b1100010000000010110011 f"
0X"
15
12
#40
02
#45
0q
0C
1)"
0y
b100 d
b100 n
b100 D"
b110 `
b110 p
b110 F"
b101 b
b101 o
b101 E"
b0 I
b0 ]
b0 /"
b110011 "
b110011 E
b110011 Z
b110011 2"
0g"
1A
b1000000011000101000001000110011 !
b1000000011000101000001000110011 ?
b1000000011000101000001000110011 f
b1000000011000101000001000110011 s
b1000000011000101000001000110011 U"
b1000000011000101000001000110011 f"
b100 B
b100 V"
b100 e"
0W"
b1 4
b1 :
b1 X
b1 K"
b1 9
12
#50
02
#55
1L"
b1000 =
b1000 e
b1000 r
b1000 S"
b1000 h"
1X"
1J
b110011 "
b110011 E
b110011 Z
b110011 2"
b10 %
b10 K
b10 ^
b10 ."
b0 #
b0 F
b0 [
b0 1"
b0 $
b0 G
b0 \
b0 0"
b100 (
b100 N
b100 c
b100 +"
b100 H"
b110 &
b110 L
b110 _
b110 -"
b110 J"
b101 '
b101 M
b101 a
b101 ,"
b101 I"
b100 D
b100 Y
b100 3"
b10 4
b10 :
b10 X
b10 K"
b10 9
12
#60
02
#65
b110 )
b110 O
b110 g
b110 P"
b101 *
b101 P
b101 h
b101 O"
b110011 "
b110011 E
b110011 Z
b110011 2"
b1000 D
b1000 Y
b1000 3"
1g"
b11 n"
1W"
b100101000010001110110011 T"
b100101000010001110110011 _"
b100101000010001110110011 m"
b11 4
b11 :
b11 X
b11 K"
b11 9
12
#70
02
#75
1%"
0)"
b10 4"
b111 d
b111 n
b111 D"
b1001 `
b1001 p
b1001 F"
b1000 b
b1000 o
b1000 E"
b100 n"
b110001011011010100110011 T"
b110001011011010100110011 _"
b110001011011010100110011 m"
b1000 j"
b100101000010001110110011 !
b100101000010001110110011 ?
b100101000010001110110011 f
b100101000010001110110011 s
b100101000010001110110011 U"
b100101000010001110110011 f"
0X"
b110011 "
b110011 E
b110011 Z
b110011 2"
b100 4
b100 :
b100 X
b100 K"
b100 9
12
#80
02
#85
1&"
0%"
b11 4"
b1010 d
b1010 n
b1010 D"
b1100 `
b1100 p
b1100 F"
b1011 b
b1011 o
b1011 E"
b110011 "
b110011 E
b110011 Z
b110011 2"
b100 %
b100 K
b100 ^
b100 ."
b10 $
b10 G
b10 \
b10 0"
b111 (
b111 N
b111 c
b111 +"
b111 H"
b1001 &
b1001 L
b1001 _
b1001 -"
b1001 J"
b1000 '
b1000 M
b1000 a
b1000 ,"
b1000 I"
0g"
b110001011011010100110011 !
b110001011011010100110011 ?
b110001011011010100110011 f
b110001011011010100110011 s
b110001011011010100110011 U"
b110001011011010100110011 f"
b1000 B
b1000 V"
b1000 e"
0W"
0L"
05
b101 9
12
#90
02
#95
b1100 =
b1100 e
b1100 r
b1100 S"
b1100 h"
1X"
b110011 "
b110011 E
b110011 Z
b110011 2"
b1000 %
b1000 K
b1000 ^
b1000 ."
b11 $
b11 G
b11 \
b11 0"
b1010 (
b1010 N
b1010 c
b1010 +"
b1010 H"
b1100 &
b1100 L
b1100 _
b1100 -"
b1100 J"
b1011 '
b1011 M
b1011 a
b1011 ,"
b1011 I"
b1001 )
b1001 O
b1001 g
b1001 P"
b1000 *
b1000 P
b1000 h
b1000 O"
12
#100
02
#105
b1100 )
b1100 O
b1100 g
b1100 P"
b1011 *
b1011 P
b1011 h
b1011 O"
b110011 "
b110011 E
b110011 Z
b110011 2"
b1100 D
b1100 Y
b1100 3"
1g"
b101 n"
1W"
b111101110100011010110011 T"
b111101110100011010110011 _"
b111101110100011010110011 m"
12
#110
02
#115
1*"
0&"
b100 4"
b1101 d
b1101 n
b1101 D"
b1111 `
b1111 p
b1111 F"
b1110 b
b1110 o
b1110 E"
b110 n"
b1001010001110100000110011 T"
b1001010001110100000110011 _"
b1001010001110100000110011 m"
b1100 j"
b111101110100011010110011 !
b111101110100011010110011 ?
b111101110100011010110011 f
b111101110100011010110011 s
b111101110100011010110011 U"
b111101110100011010110011 f"
0X"
b110011 "
b110011 E
b110011 Z
b110011 2"
12
