$date
	Thu Aug 28 04:09:11 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_decoder $end
$var wire 1 ! d_o_stall $end
$var wire 32 " d_o_pc [31:0] $end
$var wire 11 # d_o_opcode [10:0] $end
$var wire 32 $ d_o_imm [31:0] $end
$var wire 3 % d_o_funct3 [2:0] $end
$var wire 1 & d_o_flush $end
$var wire 4 ' d_o_exception [3:0] $end
$var wire 1 ( d_o_ce $end
$var wire 14 ) d_o_alu [13:0] $end
$var wire 5 * d_o_addr_rs2_p [4:0] $end
$var wire 5 + d_o_addr_rs2 [4:0] $end
$var wire 5 , d_o_addr_rs1_p [4:0] $end
$var wire 5 - d_o_addr_rs1 [4:0] $end
$var wire 5 . d_o_addr_rd_p [4:0] $end
$var wire 5 / d_o_addr_rd [4:0] $end
$var parameter 32 0 AWIDTH $end
$var parameter 32 1 CLK_PERIOD $end
$var parameter 32 2 DWIDTH $end
$var parameter 32 3 IWIDTH $end
$var parameter 32 4 PC_WIDTH $end
$var reg 1 5 d_clk $end
$var reg 1 6 d_i_ce $end
$var reg 1 7 d_i_flush $end
$var reg 32 8 d_i_instr [31:0] $end
$var reg 32 9 d_i_pc [31:0] $end
$var reg 1 : d_i_stall $end
$var reg 1 ; d_rst $end
$scope module uut $end
$var wire 1 5 d_clk $end
$var wire 1 6 d_i_ce $end
$var wire 1 7 d_i_flush $end
$var wire 32 < d_i_instr [31:0] $end
$var wire 32 = d_i_pc [31:0] $end
$var wire 1 : d_i_stall $end
$var wire 5 > d_o_addr_rd [4:0] $end
$var wire 5 ? d_o_addr_rs1 [4:0] $end
$var wire 5 @ d_o_addr_rs2 [4:0] $end
$var wire 1 & d_o_flush $end
$var wire 1 ! d_o_stall $end
$var wire 1 ; d_rst $end
$var wire 1 A stall_bit $end
$var parameter 32 B AWIDTH $end
$var parameter 32 C DWIDTH $end
$var parameter 32 D FUNCT_WIDTH $end
$var parameter 32 E IWIDTH $end
$var parameter 32 F PC_WIDTH $end
$var reg 1 G alu_add_d $end
$var reg 1 H alu_and_d $end
$var reg 1 I alu_eq_d $end
$var reg 1 J alu_ge_d $end
$var reg 1 K alu_geu_d $end
$var reg 1 L alu_lt_d $end
$var reg 1 M alu_ltu_d $end
$var reg 1 N alu_neq_d $end
$var reg 1 O alu_or_d $end
$var reg 1 P alu_sll_d $end
$var reg 1 Q alu_slt_d $end
$var reg 1 R alu_sltu_d $end
$var reg 1 S alu_sra_d $end
$var reg 1 T alu_srl_d $end
$var reg 1 U alu_sub_d $end
$var reg 1 V alu_xor_d $end
$var reg 5 W d_o_addr_rd_p [4:0] $end
$var reg 5 X d_o_addr_rs1_p [4:0] $end
$var reg 5 Y d_o_addr_rs2_p [4:0] $end
$var reg 14 Z d_o_alu [13:0] $end
$var reg 1 ( d_o_ce $end
$var reg 4 [ d_o_exception [3:0] $end
$var reg 3 \ d_o_funct3 [2:0] $end
$var reg 32 ] d_o_imm [31:0] $end
$var reg 11 ^ d_o_opcode [10:0] $end
$var reg 32 _ d_o_pc [31:0] $end
$var reg 3 ` funct3 [2:0] $end
$var reg 1 a illegal_check $end
$var reg 32 b imm_d [31:0] $end
$var reg 7 c opcode [6:0] $end
$var reg 1 d opcode_auipc_d $end
$var reg 1 e opcode_branch_d $end
$var reg 1 f opcode_fence_d $end
$var reg 1 g opcode_itype_d $end
$var reg 1 h opcode_jal_d $end
$var reg 1 i opcode_jalr_d $end
$var reg 1 j opcode_load_word_d $end
$var reg 1 k opcode_lui_d $end
$var reg 1 l opcode_rtype_d $end
$var reg 1 m opcode_store_word_d $end
$var reg 1 n opcode_system_d $end
$var reg 1 o system_exeption $end
$var reg 5 p temp_addr_rd [4:0] $end
$var reg 5 q temp_addr_rs1 [4:0] $end
$var reg 5 r temp_addr_rs2 [4:0] $end
$var reg 1 s valid_opcode $end
$upscope $end
$scope task reset $end
$var integer 32 t i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 F
b100000 E
b11 D
b100000 C
b101 B
b100000 4
b100000 3
b100000 2
b1010 1
b101 0
$end
#0
$dumpvars
b0 t
0s
b0 r
b0 q
b0 p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
b0 c
b0 b
0a
b0 `
b0 _
b0 ^
bx ]
bx \
b0 [
b0 Z
b0 Y
b0 X
b0 W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
1G
0A
b0 @
b0 ?
b0 >
b0 =
b0 <
0;
0:
b0 9
b0 8
07
06
05
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
0(
b0 '
0&
bx %
bx $
b0 #
b0 "
0!
$end
#5000
b1 t
15
#10000
05
#15000
1A
1!
b1 '
b1 [
1;
b10 t
15
#20000
05
#25000
b1 /
b1 >
b1 p
b10 -
b10 ?
b10 q
b11 +
b11 @
b11 r
1s
1l
1G
b110011 c
b100 9
b100 =
b1100010000000010110011 8
b1100010000000010110011 <
16
15
#30000
05
#35000
0A
0!
b0 '
b0 [
b110011 #
b110011 ^
15
#40000
05
#45000
1(
b110011 #
b110011 ^
b10 )
b10 Z
b0 $
b0 ]
b0 %
b0 \
b100 .
b100 W
b110 *
b110 Y
b101 ,
b101 X
b1000 "
b1000 _
1U
0G
b100 /
b100 >
b100 p
b110 +
b110 @
b110 r
b101 -
b101 ?
b101 q
15
b1000 9
b1000 =
b1000000011000101000001000110011 8
b1000000011000101000001000110011 <
#50000
05
#55000
b110011 #
b110011 ^
15
#60000
05
#65000
b10011 #
b10011 ^
b1 )
b1 Z
b10000 $
b10000 ]
b111 .
b111 W
b0 *
b0 Y
b1000 ,
b1000 X
b1100 "
b1100 _
1G
b10000 b
1g
0l
0U
b10011 c
b111 /
b111 >
b111 p
b0 +
b0 @
b0 r
b1000 -
b1000 ?
b1000 q
15
b1100 9
b1100 =
b1000001000000001110010011 8
b1000001000000001110010011 <
#70000
05
#75000
b10011 #
b10011 ^
15
#80000
05
#85000
b11 #
b11 ^
b100 $
b100 ]
b10 %
b10 \
b1001 .
b1001 W
b1010 ,
b1010 X
b10000 "
b10000 _
b10 `
1j
0g
1G
b100 b
b11 c
b1001 /
b1001 >
b1001 p
b1010 -
b1010 ?
b1010 q
15
b10000 9
b10000 =
b10001010010010010000011 8
b10001010010010010000011 <
#90000
05
#95000
b11 #
b11 ^
15
#100000
05
#105000
b100011 #
b100011 ^
b1000 $
b1000 ]
b0 .
b0 W
b1011 *
b1011 Y
b1100 ,
b1100 X
b10100 "
b10100 _
b1011 +
b1011 @
b1011 r
1m
0j
1G
b1000 b
b10 `
b100011 c
b0 /
b0 >
b0 p
b1100 -
b1100 ?
b1100 q
15
b10100 9
b10100 =
b101101100010010000100011 8
b101101100010010000100011 <
#110000
05
#115000
b100011 #
b100011 ^
15
#120000
05
#125000
b1100011 #
b1100011 ^
b10000000000 )
b10000000000 Z
b100 $
b100 ]
b0 %
b0 \
b1110 *
b1110 Y
b1101 ,
b1101 X
b11000 "
b11000 _
1I
1e
0m
0G
b100 b
b0 `
b1100011 c
b1110 +
b1110 @
b1110 r
b1101 -
b1101 ?
b1101 q
15
b11000 9
b11000 =
b111001101000001001100011 8
b111001101000001001100011 <
#130000
05
#135000
b1100011 #
b1100011 ^
15
#140000
05
#145000
b1101111 #
b1101111 ^
b1 )
b1 Z
b100000000100000000 $
b100000000100000000 ]
b1111 .
b1111 W
b0 *
b0 Y
b0 ,
b0 X
b11100 "
b11100 _
1G
b1111 /
b1111 >
b1111 p
1h
0e
0I
b100000000100000000 b
b1101111 c
b0 +
b0 @
b0 r
b0 -
b0 ?
b0 q
15
b11100 9
b11100 =
b10000000000100000011111101111 8
b10000000000100000011111101111 <
#150000
05
#155000
b1101111 #
b1101111 ^
15
#160000
05
#165000
b1100111 #
b1100111 ^
b10100 $
b10100 ]
b10000 .
b10000 W
b10001 ,
b10001 X
b100000 "
b100000 _
b10001 -
b10001 ?
b10001 q
1i
0h
1G
b10100 b
b1100111 c
b10000 /
b10000 >
b10000 p
15
b100000 9
b100000 =
b1010010001000100001100111 8
b1010010001000100001100111 <
#170000
05
#175000
b1100111 #
b1100111 ^
15
#180000
05
#185000
b110111 #
b110111 ^
b10010001101000101000000000000 $
b10010001101000101000000000000 ]
b10010 .
b10010 W
b0 ,
b0 X
b100100 "
b100100 _
1k
0i
1G
b10010001101000101000000000000 b
b110111 c
b10010 /
b10010 >
b10010 p
b0 -
b0 ?
b0 q
15
b100100 9
b100100 =
b10010001101000101100100110111 8
b10010001101000101100100110111 <
#190000
05
#195000
b110111 #
b110111 ^
15
#200000
05
#205000
b10111 #
b10111 ^
b10101011110011011110000000000000 $
b10101011110011011110000000000000 ]
b10011 .
b10011 W
b101000 "
b101000 _
1d
0k
1G
b10101011110011011110000000000000 b
b10111 c
b10011 /
b10011 >
b10011 p
15
b101000 9
b101000 =
b10101011110011011110100110010111 8
b10101011110011011110100110010111 <
#210000
05
#215000
b10111 #
b10111 ^
15
#220000
05
#225000
b10111 #
b10111 ^
15
