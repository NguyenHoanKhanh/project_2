$date
	Thu Sep 25 14:32:16 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_writeback $end
$var wire 1 ! wb_o_we_rd $end
$var wire 1 " wb_o_stall $end
$var wire 32 # wb_o_rd_data [31:0] $end
$var wire 5 $ wb_o_rd_addr [4:0] $end
$var wire 11 % wb_o_opcode [10:0] $end
$var wire 32 & wb_o_next_pc [31:0] $end
$var wire 3 ' wb_o_funct [2:0] $end
$var wire 1 ( wb_o_flush $end
$var wire 1 ) wb_o_change_pc $end
$var wire 1 * wb_o_ce $end
$var parameter 32 + AWIDTH $end
$var parameter 32 , DWIDTH $end
$var parameter 32 - FUNCT_WIDTH $end
$var parameter 32 . PC_WIDTH $end
$var reg 1 / wb_clk $end
$var reg 1 0 wb_i_ce $end
$var reg 1 1 wb_i_change_pc $end
$var reg 32 2 wb_i_data_load [31:0] $end
$var reg 1 3 wb_i_flush $end
$var reg 3 4 wb_i_funct [2:0] $end
$var reg 11 5 wb_i_opcode [10:0] $end
$var reg 32 6 wb_i_pc [31:0] $end
$var reg 5 7 wb_i_rd_addr [4:0] $end
$var reg 32 8 wb_i_rd_data [31:0] $end
$var reg 1 9 wb_i_stall $end
$var reg 1 : wb_i_we_rd $end
$var reg 1 ; wb_rst $end
$scope function opc $end
$var integer 32 < idx [31:0] $end
$upscope $end
$scope module uut $end
$var wire 1 = stall_bit $end
$var wire 1 / wb_clk $end
$var wire 1 0 wb_i_ce $end
$var wire 1 1 wb_i_change_pc $end
$var wire 32 > wb_i_data_load [31:0] $end
$var wire 1 3 wb_i_flush $end
$var wire 3 ? wb_i_funct [2:0] $end
$var wire 11 @ wb_i_opcode [10:0] $end
$var wire 32 A wb_i_pc [31:0] $end
$var wire 5 B wb_i_rd_addr [4:0] $end
$var wire 32 C wb_i_rd_data [31:0] $end
$var wire 1 9 wb_i_stall $end
$var wire 1 : wb_i_we_rd $end
$var wire 1 ; wb_rst $end
$var wire 1 D op_rtype $end
$var wire 1 E op_lui $end
$var wire 1 F op_load $end
$var wire 1 G op_jalr $end
$var wire 1 H op_jal $end
$var wire 1 I op_itype $end
$var wire 1 J op_auipc $end
$var parameter 32 K AWIDTH $end
$var parameter 32 L DWIDTH $end
$var parameter 32 M FUNCT_WIDTH $end
$var parameter 32 N PC_WIDTH $end
$var reg 1 * wb_o_ce $end
$var reg 1 ) wb_o_change_pc $end
$var reg 1 ( wb_o_flush $end
$var reg 3 O wb_o_funct [2:0] $end
$var reg 32 P wb_o_next_pc [31:0] $end
$var reg 11 Q wb_o_opcode [10:0] $end
$var reg 5 R wb_o_rd_addr [4:0] $end
$var reg 32 S wb_o_rd_data [31:0] $end
$var reg 1 " wb_o_stall $end
$var reg 1 ! wb_o_we_rd $end
$upscope $end
$scope task reset $end
$var integer 32 T cycles [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 N
b11 M
b100000 L
b101 K
b100000 .
b11 -
b100000 ,
b101 +
$end
#0
$dumpvars
b10 T
b0 S
b0 R
b0 Q
b0 P
b0 O
0J
0I
0H
0G
0F
0E
0D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
0=
bx <
0;
0:
09
b0 8
b0 7
b0 6
b0 5
b0 4
03
b0 2
01
00
0/
0*
0)
0(
b0 '
b0 &
b0 %
b0 $
b0 #
0"
0!
$end
#5000
1/
#10000
0/
#15000
1;
1/
#20000
0/
#25000
1)
b100 &
b100 P
b1010 $
b1010 R
b100 %
b100 Q
1!
1*
1F
b1010 7
b1010 B
11
b100 5
b100 @
b10 <
1:
10
1/
#30000
0/
#35000
b11011110101011011011111011101111 #
b11011110101011011011111011101111 S
b11011110101011011011111011101111 2
b11011110101011011011111011101111 >
1/
#40000
0/
#45000
b0 #
b0 S
00
1/
#50000
0/
#55000
1/
#60000
0/
#65000
1/
#70000
0/
#75000
1/
#80000
0/
#85000
1/
#90000
0/
#95000
1/
#100000
0/
#105000
1/
