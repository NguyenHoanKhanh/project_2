$date
	Sun Aug 03 00:47:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! ex_stall_from_alu $end
$var wire 1 " ex_o_we $end
$var wire 1 # ex_o_valid $end
$var wire 1 $ ex_o_stall $end
$var wire 32 % ex_o_pc [31:0] $end
$var wire 11 & ex_o_opcode [10:0] $end
$var wire 12 ' ex_o_imm [11:0] $end
$var wire 3 ( ex_o_funct3 [2:0] $end
$var wire 1 ) ex_o_flush $end
$var wire 32 * ex_o_data_rd [31:0] $end
$var wire 1 + ex_o_change_pc $end
$var wire 1 , ex_o_ce $end
$var wire 14 - ex_o_alu [13:0] $end
$var wire 32 . ex_next_pc [31:0] $end
$var parameter 32 / AWIDTH $end
$var parameter 32 0 DWIDTH $end
$var parameter 32 1 FUNCT_WIDTH $end
$var parameter 32 2 PC_WIDTH $end
$var reg 1 3 ex_clk $end
$var reg 5 4 ex_i_addr_rd [4:0] $end
$var reg 5 5 ex_i_addr_rs1 [4:0] $end
$var reg 5 6 ex_i_addr_rs2 [4:0] $end
$var reg 14 7 ex_i_alu [13:0] $end
$var reg 1 8 ex_i_ce $end
$var reg 32 9 ex_i_data_rs1 [31:0] $end
$var reg 32 : ex_i_data_rs2 [31:0] $end
$var reg 1 ; ex_i_flush $end
$var reg 3 < ex_i_funct3 [2:0] $end
$var reg 32 = ex_i_imm [31:0] $end
$var reg 11 > ex_i_opcode [10:0] $end
$var reg 32 ? ex_i_pc [31:0] $end
$var reg 1 @ ex_i_stall $end
$var reg 1 A ex_rst $end
$scope module e $end
$var wire 1 3 ex_clk $end
$var wire 5 B ex_i_addr_rd [4:0] $end
$var wire 5 C ex_i_addr_rs1 [4:0] $end
$var wire 5 D ex_i_addr_rs2 [4:0] $end
$var wire 14 E ex_i_alu [13:0] $end
$var wire 1 8 ex_i_ce $end
$var wire 32 F ex_i_data_rs1 [31:0] $end
$var wire 32 G ex_i_data_rs2 [31:0] $end
$var wire 1 ; ex_i_flush $end
$var wire 3 H ex_i_funct3 [2:0] $end
$var wire 32 I ex_i_imm [31:0] $end
$var wire 11 J ex_i_opcode [10:0] $end
$var wire 32 K ex_i_pc [31:0] $end
$var wire 1 @ ex_i_stall $end
$var wire 1 A ex_rst $end
$var wire 1 L stall_bit $end
$var wire 32 M temp_pc [31:0] $end
$var wire 5 N shamt [4:0] $end
$var wire 1 O op_system $end
$var wire 1 P op_store $end
$var wire 1 Q op_rtype $end
$var wire 1 R op_lui $end
$var wire 1 S op_load $end
$var wire 1 T op_jalr $end
$var wire 1 U op_jal $end
$var wire 1 V op_itype $end
$var wire 1 W op_fence $end
$var wire 1 X op_branch $end
$var wire 1 Y op_auipc $end
$var wire 1 Z alu_xor $end
$var wire 1 [ alu_sub $end
$var wire 1 \ alu_srl $end
$var wire 1 ] alu_sra $end
$var wire 1 ^ alu_sltu $end
$var wire 1 _ alu_slt $end
$var wire 1 ` alu_sll $end
$var wire 1 a alu_or $end
$var wire 1 b alu_neq $end
$var wire 1 c alu_geu $end
$var wire 1 d alu_ge $end
$var wire 1 e alu_eq $end
$var wire 1 f alu_and $end
$var wire 1 g alu_add $end
$var parameter 32 h AWIDTH $end
$var parameter 32 i DWIDTH $end
$var parameter 32 j FUNCT_WIDTH $end
$var parameter 32 k PC_WIDTH $end
$var reg 32 l a [31:0] $end
$var reg 32 m alu_value [31:0] $end
$var reg 32 n b [31:0] $end
$var reg 32 o ex_next_pc [31:0] $end
$var reg 5 p ex_o_addr_rd [4:0] $end
$var reg 5 q ex_o_addr_rs1 [4:0] $end
$var reg 5 r ex_o_addr_rs2 [4:0] $end
$var reg 14 s ex_o_alu [13:0] $end
$var reg 1 , ex_o_ce $end
$var reg 1 + ex_o_change_pc $end
$var reg 32 t ex_o_data_rd [31:0] $end
$var reg 32 u ex_o_data_rs1 [31:0] $end
$var reg 32 v ex_o_data_rs2 [31:0] $end
$var reg 1 ) ex_o_flush $end
$var reg 3 w ex_o_funct3 [2:0] $end
$var reg 12 x ex_o_imm [11:0] $end
$var reg 11 y ex_o_opcode [10:0] $end
$var reg 32 z ex_o_pc [31:0] $end
$var reg 1 $ ex_o_stall $end
$var reg 1 # ex_o_valid $end
$var reg 1 " ex_o_we $end
$var reg 1 ! ex_stall_from_alu $end
$upscope $end
$scope task reset $end
$upscope $end
$scope task test_instruction $end
$var reg 14 { alu [13:0] $end
$var reg 32 | imm [31:0] $end
$var reg 11 } opcode [10:0] $end
$var reg 32 ~ pc [31:0] $end
$var reg 32 !" rs1 [31:0] $end
$var reg 32 "" rs2 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 k
b11 j
b100000 i
b101 h
b100000 2
b11 1
b100000 0
b101 /
$end
#0
$dumpvars
bx ""
bx !"
bx ~
bx }
bx |
bx {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
bx n
b0 m
bx l
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
bx N
bx M
0L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
0A
0@
bx ?
bx >
bx =
bx <
0;
bx :
bx 9
08
bx 7
bx 6
bx 5
bx 4
03
b0 .
b0 -
0,
0+
b0 *
0)
b0 (
b0 '
b0 &
b0 %
0$
0#
0"
0!
$end
#5
13
#10
03
1A
#15
bx p
bx %
bx z
bx .
bx o
13
#20
b11110 m
b10100 N
1Q
0V
0S
0P
0X
0U
0T
0R
0Y
0O
0W
1g
0[
0_
0^
0Z
0a
0f
0`
0\
0]
0e
0b
0d
0c
1,
b10100 n
b1010 l
03
18
b1000000000000 M
b1000000000000 ?
b1000000000000 K
b0 =
b0 I
b10100 :
b10100 G
b1010 9
b1010 F
b0 >
b0 J
b0 7
b0 E
b1000000000000 ~
b0 |
b10100 ""
b1010 !"
b0 }
b0 {
#25
b11110 *
b11110 t
b10100 v
b1010 u
bx r
bx q
bx (
bx w
b1000000000000 %
b1000000000000 z
b1000000000000 .
b1000000000000 o
13
#30
b11110 N
0g
1[
b10100 m
b11110 n
b110010 l
03
b1000000000100 M
b1000000000100 ?
b1000000000100 K
b11110 :
b11110 G
b110010 9
b110010 F
b1 7
b1 E
b1000000000100 ~
b11110 ""
b110010 !"
b1 {
#35
b10100 *
b10100 t
b11110 v
b110010 u
b1 -
b1 s
b1000000000100 %
b1000000000100 z
b1000000000100 .
b1000000000100 o
13
#40
b11 N
0[
1`
b1000 m
b11 n
b1 l
03
b1000000001000 M
b1000000001000 ?
b1000000001000 K
b11 :
b11 G
b1 9
b1 F
b111 7
b111 E
b1000000001000 ~
b11 ""
b1 !"
b111 {
#45
b1000 *
b1000 t
b11 v
b1 u
b111 -
b111 s
b1000000001000 %
b1000000001000 z
b1000000001000 .
b1000000001000 o
13
#50
b10 N
0`
1]
b11111111111111111111111111111100 m
b10 n
b11111111111111111111111111110000 l
03
b1000000001100 M
b1000000001100 ?
b1000000001100 K
b10 :
b10 G
b11111111111111111111111111110000 9
b11111111111111111111111111110000 F
b1001 7
b1001 E
b1000000001100 ~
b10 ""
b11111111111111111111111111110000 !"
b1001 {
#55
b11111111111111111111111111111100 *
b11111111111111111111111111111100 t
b10 v
b11111111111111111111111111110000 u
b1001 -
b1001 s
b1000000001100 %
b1000000001100 z
b1000000001100 .
b1000000001100 o
13
#60
b10100 N
0Q
1R
1g
0]
b10101011110011010001001000110100 m
b10101011110011010001001000110100 n
b0 l
03
b1000000010000 M
b1000000010000 ?
b1000000010000 K
b10101011110011010001001000110100 =
b10101011110011010001001000110100 I
b0 :
b0 G
b0 9
b0 F
b111 >
b111 J
b0 7
b0 E
b1000000010000 ~
b10101011110011010001001000110100 |
b0 ""
b0 !"
b111 }
b0 {
#65
1#
b10101011110011010001000000000000 *
b10101011110011010001000000000000 t
1"
b1000110100 '
b1000110100 x
b0 v
b0 u
b111 &
b111 y
b0 -
b0 s
b1000000010000 %
b1000000010000 z
b1000000010000 .
b1000000010000 o
13
#70
b10000000000000 l
b0 N
0R
1Y
b10000100000000 m
b100000000 n
03
b10000000000000 M
b10000000000000 ?
b10000000000000 K
b100000000 =
b100000000 I
b1000 >
b1000 J
b10000000000000 ~
b100000000 |
b1000 }
#75
b10000100000000 *
b10000100000000 t
b100000000 '
b100000000 x
b1000 &
b1000 y
b10000000000000 %
b10000000000000 z
1#
1"
b10000000000000 .
b10000000000000 o
13
#80
b10000 N
1U
0Y
b11000000010000 m
b10000 n
b11000000000000 l
03
b11000000000000 M
b11000000000000 ?
b11000000000000 K
b10000 =
b10000 I
b101 >
b101 J
b11000000000000 ~
b10000 |
b101 }
#85
b11000000000100 *
b11000000000100 t
1)
1+
b10000 '
b10000 x
b101 &
b101 y
b11000000000000 %
b11000000000000 z
1#
1"
b11000000010000 .
b11000000010000 o
13
#90
b1010 N
1X
0U
0g
1e
b1 m
b1010 n
b1010 l
03
b100000000000000 M
b100000000000000 ?
b100000000000000 K
b100 =
b100 I
b1010 :
b1010 G
b1010 9
b1010 F
b100 >
b100 J
b1010 7
b1010 E
b100000000000000 ~
b100 |
b1010 ""
b1010 !"
b100 }
b1010 {
#95
b100 '
b100 x
b1010 v
b1010 u
b100 &
b100 y
b1010 -
b1010 s
b100000000000000 %
b100000000000000 z
0#
0"
1+
b100000000000100 .
b100000000000100 o
13
#100
03
#105
1+
b100000000000100 .
b100000000000100 o
13
#110
03
#115
1+
b100000000000100 .
b100000000000100 o
13
#120
03
