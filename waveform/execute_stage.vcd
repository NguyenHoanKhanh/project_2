$date
	Fri Aug 08 23:12:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! ex_stall_from_alu $end
$var wire 1 " ex_o_we_reg $end
$var wire 1 # ex_o_valid $end
$var wire 1 $ ex_o_stall $end
$var wire 32 % ex_o_pc [31:0] $end
$var wire 11 & ex_o_opcode [10:0] $end
$var wire 12 ' ex_o_imm [11:0] $end
$var wire 3 ( ex_o_funct3 [2:0] $end
$var wire 1 ) ex_o_flush $end
$var wire 32 * ex_o_data_rd [31:0] $end
$var wire 1 + ex_o_change_pc $end
$var wire 1 , ex_o_ce $end
$var wire 14 - ex_o_alu [13:0] $end
$var wire 5 . ex_o_addr_rd [4:0] $end
$var wire 32 / ex_next_pc [31:0] $end
$var parameter 32 0 AWIDTH $end
$var parameter 32 1 DWIDTH $end
$var parameter 32 2 FUNCT_WIDTH $end
$var parameter 32 3 PC_WIDTH $end
$var reg 1 4 ex_clk $end
$var reg 5 5 ex_i_addr_rd [4:0] $end
$var reg 5 6 ex_i_addr_rs1 [4:0] $end
$var reg 5 7 ex_i_addr_rs2 [4:0] $end
$var reg 14 8 ex_i_alu [13:0] $end
$var reg 1 9 ex_i_ce $end
$var reg 32 : ex_i_data_rs1 [31:0] $end
$var reg 32 ; ex_i_data_rs2 [31:0] $end
$var reg 1 < ex_i_flush $end
$var reg 3 = ex_i_funct3 [2:0] $end
$var reg 32 > ex_i_imm [31:0] $end
$var reg 11 ? ex_i_opcode [10:0] $end
$var reg 32 @ ex_i_pc [31:0] $end
$var reg 1 A ex_i_stall $end
$var reg 1 B ex_rst $end
$scope module e $end
$var wire 1 4 ex_clk $end
$var wire 5 C ex_i_addr_rd [4:0] $end
$var wire 5 D ex_i_addr_rs1 [4:0] $end
$var wire 5 E ex_i_addr_rs2 [4:0] $end
$var wire 14 F ex_i_alu [13:0] $end
$var wire 1 9 ex_i_ce $end
$var wire 32 G ex_i_data_rs1 [31:0] $end
$var wire 32 H ex_i_data_rs2 [31:0] $end
$var wire 1 < ex_i_flush $end
$var wire 3 I ex_i_funct3 [2:0] $end
$var wire 32 J ex_i_imm [31:0] $end
$var wire 11 K ex_i_opcode [10:0] $end
$var wire 32 L ex_i_pc [31:0] $end
$var wire 1 A ex_i_stall $end
$var wire 1 B ex_rst $end
$var wire 1 M stall_bit $end
$var wire 32 N temp_pc [31:0] $end
$var wire 5 O shamt [4:0] $end
$var wire 1 P op_system $end
$var wire 1 Q op_store $end
$var wire 1 R op_rtype $end
$var wire 1 S op_lui $end
$var wire 1 T op_load $end
$var wire 1 U op_jalr $end
$var wire 1 V op_jal $end
$var wire 1 W op_itype $end
$var wire 1 X op_fence $end
$var wire 1 Y op_branch $end
$var wire 1 Z op_auipc $end
$var wire 1 [ alu_xor $end
$var wire 1 \ alu_sub $end
$var wire 1 ] alu_srl $end
$var wire 1 ^ alu_sra $end
$var wire 1 _ alu_sltu $end
$var wire 1 ` alu_slt $end
$var wire 1 a alu_sll $end
$var wire 1 b alu_or $end
$var wire 1 c alu_neq $end
$var wire 1 d alu_geu $end
$var wire 1 e alu_ge $end
$var wire 1 f alu_eq $end
$var wire 1 g alu_and $end
$var wire 1 h alu_add $end
$var parameter 32 i AWIDTH $end
$var parameter 32 j DWIDTH $end
$var parameter 32 k FUNCT_WIDTH $end
$var parameter 32 l PC_WIDTH $end
$var reg 32 m a [31:0] $end
$var reg 32 n alu_value [31:0] $end
$var reg 32 o b [31:0] $end
$var reg 32 p ex_next_pc [31:0] $end
$var reg 5 q ex_o_addr_rd [4:0] $end
$var reg 5 r ex_o_addr_rs1 [4:0] $end
$var reg 5 s ex_o_addr_rs2 [4:0] $end
$var reg 14 t ex_o_alu [13:0] $end
$var reg 32 u ex_o_alu_value [31:0] $end
$var reg 1 , ex_o_ce $end
$var reg 1 + ex_o_change_pc $end
$var reg 32 v ex_o_data_rd [31:0] $end
$var reg 32 w ex_o_data_rs1 [31:0] $end
$var reg 32 x ex_o_data_rs2 [31:0] $end
$var reg 1 ) ex_o_flush $end
$var reg 3 y ex_o_funct3 [2:0] $end
$var reg 12 z ex_o_imm [11:0] $end
$var reg 11 { ex_o_opcode [10:0] $end
$var reg 32 | ex_o_pc [31:0] $end
$var reg 1 $ ex_o_stall $end
$var reg 1 # ex_o_valid $end
$var reg 1 " ex_o_we_reg $end
$var reg 1 ! ex_stall_from_alu $end
$upscope $end
$scope task reset $end
$upscope $end
$scope task test_instruction $end
$var reg 14 } alu [13:0] $end
$var reg 32 ~ imm [31:0] $end
$var reg 11 !" opcode [10:0] $end
$var reg 32 "" pc [31:0] $end
$var reg 32 #" rs1 [31:0] $end
$var reg 32 $" rs2 [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 l
b11 k
b100000 j
b101 i
b100000 3
b11 2
b100000 1
b101 0
$end
#0
$dumpvars
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
bx u
b0 t
b0 s
b0 r
b0 q
b0 p
bx o
b0 n
bx m
xh
xg
xf
xe
xd
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
bx O
bx N
0M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
0B
0A
bx @
bx ?
bx >
bx =
0<
bx ;
bx :
09
bx 8
bx 7
bx 6
bx 5
04
b0 /
b0 .
b0 -
0,
0+
b0 *
0)
b0 (
b0 '
b0 &
b0 %
0$
0#
0"
x!
$end
#5
14
#10
04
1B
#15
bx .
bx q
bx %
bx |
bx /
bx p
14
#20
b11110 n
b10100 O
1R
0W
0T
0Q
0Y
0V
0U
0S
0Z
0P
0X
1h
0\
0`
0_
0[
0b
0g
0a
0]
0^
0f
0c
0e
0d
1,
b10100 o
b1010 m
04
19
b1000000000000 N
b1000000000000 @
b1000000000000 L
b0 >
b0 J
b10100 ;
b10100 H
b1010 :
b1010 G
b0 ?
b0 K
b0 8
b0 F
b1000000000000 ""
b0 ~
b10100 $"
b1010 #"
b0 !"
b0 }
#25
b11110 u
b11110 *
b11110 v
b10100 x
b1010 w
bx s
bx r
bx (
bx y
b1000000000000 %
b1000000000000 |
b1000000000000 /
b1000000000000 p
14
#30
b11110 O
0h
1\
b10100 n
b11110 o
b110010 m
04
b1000000000100 N
b1000000000100 @
b1000000000100 L
b11110 ;
b11110 H
b110010 :
b110010 G
b1 8
b1 F
b1000000000100 ""
b11110 $"
b110010 #"
b1 }
#35
b10100 u
b10100 *
b10100 v
b11110 x
b110010 w
b1 -
b1 t
b1000000000100 %
b1000000000100 |
b1000000000100 /
b1000000000100 p
14
#40
b11 O
0\
1a
b1000 n
b11 o
b1 m
04
b1000000001000 N
b1000000001000 @
b1000000001000 L
b11 ;
b11 H
b1 :
b1 G
b111 8
b111 F
b1000000001000 ""
b11 $"
b1 #"
b111 }
#45
b1000 u
b1000 *
b1000 v
b11 x
b1 w
b111 -
b111 t
b1000000001000 %
b1000000001000 |
b1000000001000 /
b1000000001000 p
14
#50
b10 O
0a
1^
b11111111111111111111111111111100 n
b10 o
b11111111111111111111111111110000 m
04
b1000000001100 N
b1000000001100 @
b1000000001100 L
b10 ;
b10 H
b11111111111111111111111111110000 :
b11111111111111111111111111110000 G
b1001 8
b1001 F
b1000000001100 ""
b10 $"
b11111111111111111111111111110000 #"
b1001 }
#55
b11111111111111111111111111111100 u
b11111111111111111111111111111100 *
b11111111111111111111111111111100 v
b10 x
b11111111111111111111111111110000 w
b1001 -
b1001 t
b1000000001100 %
b1000000001100 |
b1000000001100 /
b1000000001100 p
14
#60
b10100 O
0R
1S
1h
0^
b10101011110011010001001000110100 n
b10101011110011010001001000110100 o
b0 m
04
b1000000010000 N
b1000000010000 @
b1000000010000 L
b10101011110011010001001000110100 >
b10101011110011010001001000110100 J
b0 ;
b0 H
b0 :
b0 G
b111 ?
b111 K
b0 8
b0 F
b1000000010000 ""
b10101011110011010001001000110100 ~
b0 $"
b0 #"
b111 !"
b0 }
#65
1#
b10101011110011010001000000000000 *
b10101011110011010001000000000000 v
1"
b1000110100 '
b1000110100 z
b0 x
b0 w
b111 &
b111 {
b0 -
b0 t
b1000000010000 %
b1000000010000 |
b1000000010000 /
b1000000010000 p
14
#70
b10000000000000 m
b0 O
0S
1Z
b10000100000000 n
b100000000 o
04
b10000000000000 N
b10000000000000 @
b10000000000000 L
b100000000 >
b100000000 J
b1000 ?
b1000 K
b10000000000000 ""
b100000000 ~
b1000 !"
#75
b10000100000000 *
b10000100000000 v
b100000000 '
b100000000 z
b1000 &
b1000 {
b10000000000000 %
b10000000000000 |
b10000000000000 /
b10000000000000 p
14
#80
b10000 O
1V
0Z
b11000000010000 n
b10000 o
b11000000000000 m
04
b11000000000000 N
b11000000000000 @
b11000000000000 L
b10000 >
b10000 J
b101 ?
b101 K
b11000000000000 ""
b10000 ~
b101 !"
#85
b11000000000100 *
b11000000000100 v
1)
1+
b10000 '
b10000 z
b101 &
b101 {
b11000000000000 %
b11000000000000 |
b11000000010000 /
b11000000010000 p
14
#90
b1010 O
1Y
0V
0h
1f
b1 n
b1010 o
b1010 m
04
b100000000000000 N
b100000000000000 @
b100000000000000 L
b100 >
b100 J
b1010 ;
b1010 H
b1010 :
b1010 G
b100 ?
b100 K
b1010 8
b1010 F
b100000000000000 ""
b100 ~
b1010 $"
b1010 #"
b100 !"
b1010 }
#95
b100 '
b100 z
b1010 x
b1010 w
b100 &
b100 {
b1010 -
b1010 t
b100000000000000 %
b100000000000000 |
b100000000000100 /
b100000000000100 p
14
#100
04
#105
b100000000000100 /
b100000000000100 p
14
#110
04
#115
b100000000000100 /
b100000000000100 p
14
#120
04
