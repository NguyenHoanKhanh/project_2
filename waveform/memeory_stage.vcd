$date
	Thu Aug 07 00:02:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_mem_stage $end
$var wire 1 ! me_o_we $end
$var wire 32 " me_o_store_data [31:0] $end
$var wire 5 # me_o_store_addr [4:0] $end
$var wire 1 $ me_o_stb $end
$var wire 1 % me_o_stall $end
$var wire 1 & me_o_rd_we $end
$var wire 32 ' me_o_rd_data [31:0] $end
$var wire 5 ( me_o_rd_addr [4:0] $end
$var wire 11 ) me_o_opcode [10:0] $end
$var wire 5 * me_o_load_addr [4:0] $end
$var wire 1 + me_o_flush $end
$var wire 1 , me_o_cyc $end
$var wire 1 - me_o_ce $end
$var parameter 32 . AWIDTH $end
$var parameter 32 / DWIDTH $end
$var parameter 32 0 FUNCT_WIDTH $end
$var reg 1 1 me_clk $end
$var reg 32 2 me_i_alu_value [31:0] $end
$var reg 1 3 me_i_ce $end
$var reg 1 4 me_i_flush $end
$var reg 11 5 me_i_opcode [10:0] $end
$var reg 5 6 me_i_rd_addr [4:0] $end
$var reg 32 7 me_i_rd_data [31:0] $end
$var reg 32 8 me_i_rs2_data [31:0] $end
$var reg 1 9 me_i_stall $end
$var reg 1 : me_rst $end
$scope module UUT $end
$var wire 1 1 me_clk $end
$var wire 32 ; me_i_alu_value [31:0] $end
$var wire 1 3 me_i_ce $end
$var wire 1 4 me_i_flush $end
$var wire 3 < me_i_funct3 [2:0] $end
$var wire 11 = me_i_opcode [10:0] $end
$var wire 5 > me_i_rd_addr [4:0] $end
$var wire 32 ? me_i_rd_data [31:0] $end
$var wire 32 @ me_i_rs2_data [31:0] $end
$var wire 1 A me_i_stall $end
$var wire 1 : me_rst $end
$var wire 1 B stall_bit $end
$var wire 32 C raw [31:0] $end
$var wire 32 D me_i_load_data [31:0] $end
$var wire 1 E me_i_ack $end
$var wire 2 F byte_offset [1:0] $end
$var parameter 32 G AWIDTH $end
$var parameter 32 H DWIDTH $end
$var parameter 32 I FUNCT_WIDTH $end
$var reg 4 J byte_enable [3:0] $end
$var reg 32 K final_load [31:0] $end
$var reg 1 - me_o_ce $end
$var reg 1 , me_o_cyc $end
$var reg 1 + me_o_flush $end
$var reg 5 L me_o_load_addr [4:0] $end
$var reg 11 M me_o_opcode [10:0] $end
$var reg 5 N me_o_rd_addr [4:0] $end
$var reg 32 O me_o_rd_data [31:0] $end
$var reg 1 & me_o_rd_we $end
$var reg 1 % me_o_stall $end
$var reg 1 $ me_o_stb $end
$var reg 5 P me_o_store_addr [4:0] $end
$var reg 32 Q me_o_store_data [31:0] $end
$var reg 1 ! me_o_we $end
$var reg 1 R pending_request $end
$var reg 5 S rd_addr_d [4:0] $end
$var reg 32 T rd_data_d [31:0] $end
$var reg 1 U rd_we_d $end
$var reg 32 V store_data_aligned [31:0] $end
$scope module m $end
$var wire 1 1 m_clk $end
$var wire 4 W m_i_be_enable [3:0] $end
$var wire 1 , m_i_cyc $end
$var wire 32 X m_i_data [31:0] $end
$var wire 5 Y m_i_load_addr [4:0] $end
$var wire 1 $ m_i_stb $end
$var wire 5 Z m_i_store_addr [4:0] $end
$var wire 1 ! m_i_we $end
$var wire 1 : m_rst $end
$var wire 32 [ mask [31:0] $end
$var parameter 32 \ AWIDTH $end
$var parameter 37 ] DEPTH $end
$var parameter 32 ^ DWIDTH $end
$var reg 1 E m_o_ack $end
$var reg 32 _ m_o_read_data [31:0] $end
$var reg 1 ` m_o_stall $end
$var integer 32 a i [31:0] $end
$upscope $end
$upscope $end
$scope task do_reset $end
$upscope $end
$scope task do_rtype $end
$var reg 5 b rd_addr [4:0] $end
$var reg 32 c rd_data [31:0] $end
$upscope $end
$scope task do_store $end
$var reg 5 d addr [4:0] $end
$var reg 32 e data [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 ^
b100000 ]
b101 \
b11 I
b100000 H
b101 G
b11 0
b100000 /
b101 .
$end
#0
$dumpvars
bx e
bx d
bx c
bx b
b100000 a
0`
b0 _
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
0U
b0 T
b0 S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 F
0E
b0 D
b0 C
0B
0A
b0 @
b0 ?
b0 >
b0 =
bz <
b0 ;
0:
09
b0 8
b0 7
b0 6
b0 5
04
x3
b0 2
01
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
0&
0%
0$
b0 #
b0 "
0!
$end
#5
b100000 a
11
#10
01
#15
b100000 a
11
#20
b10 F
b1010 #
b1010 P
b1010 Z
b11 )
b11 M
1$
1,
1!
01
13
b1110 8
b1110 @
b1010 2
b1010 ;
b11 5
b11 =
b1110 e
b1010 d
1:
#25
1-
1E
b1010 T
b11 S
b0 #
b0 P
b0 Z
1U
0$
0,
0!
b11000000111001 7
b11000000111001 ?
b11 6
b11 >
b0 5
b0 =
b11000000111001 c
b11 b
13
11
#30
01
#35
0E
0-
0U
b1010 '
b1010 O
1&
b11 (
b11 N
b0 )
b0 M
03
11
#40
01
#45
11
#50
01
#55
11
#60
01
#65
11
