$date
	Fri Aug 22 15:44:40 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_mem_stage $end
$var wire 1 ! me_o_we $end
$var wire 32 " me_o_store_data [31:0] $end
$var wire 5 # me_o_store_addr [4:0] $end
$var wire 1 $ me_o_stb $end
$var wire 1 % me_o_stall $end
$var wire 1 & me_o_rd_we $end
$var wire 32 ' me_o_rd_data [31:0] $end
$var wire 5 ( me_o_rd_addr [4:0] $end
$var wire 11 ) me_o_opcode [10:0] $end
$var wire 32 * me_o_load_data [31:0] $end
$var wire 5 + me_o_load_addr [4:0] $end
$var wire 1 , me_o_flush $end
$var wire 1 - me_o_cyc $end
$var wire 1 . me_o_ce $end
$var parameter 32 / AWIDTH $end
$var parameter 32 0 DWIDTH $end
$var parameter 32 1 FUNCT_WIDTH $end
$var reg 1 2 me_clk $end
$var reg 32 3 me_i_alu_value [31:0] $end
$var reg 1 4 me_i_ce $end
$var reg 1 5 me_i_flush $end
$var reg 11 6 me_i_opcode [10:0] $end
$var reg 5 7 me_i_rd_addr [4:0] $end
$var reg 32 8 me_i_rd_data [31:0] $end
$var reg 32 9 me_i_rs2_data [31:0] $end
$var reg 1 : me_i_stall $end
$var reg 1 ; me_rst $end
$scope module UUT $end
$var wire 1 2 me_clk $end
$var wire 32 < me_i_alu_value [31:0] $end
$var wire 1 4 me_i_ce $end
$var wire 1 5 me_i_flush $end
$var wire 3 = me_i_funct3 [2:0] $end
$var wire 11 > me_i_opcode [10:0] $end
$var wire 5 ? me_i_rd_addr [4:0] $end
$var wire 32 @ me_i_rd_data [31:0] $end
$var wire 32 A me_i_rs2_data [31:0] $end
$var wire 1 : me_i_stall $end
$var wire 1 ; me_rst $end
$var wire 1 B stall_bit $end
$var wire 32 C raw [31:0] $end
$var wire 5 D mem_addr [4:0] $end
$var wire 32 E me_i_load_data [31:0] $end
$var wire 1 F me_i_ack $end
$var wire 2 G byte_offset [1:0] $end
$var parameter 32 H AWIDTH $end
$var parameter 32 I DWIDTH $end
$var parameter 32 J FUNCT_WIDTH $end
$var reg 4 K byte_enable [3:0] $end
$var reg 4 L byte_enable_d [3:0] $end
$var reg 2 M byte_offset_d [1:0] $end
$var reg 32 N final_load [31:0] $end
$var reg 3 O funct_d [2:0] $end
$var reg 1 . me_o_ce $end
$var reg 1 - me_o_cyc $end
$var reg 1 , me_o_flush $end
$var reg 3 P me_o_funct3 [2:0] $end
$var reg 5 Q me_o_load_addr [4:0] $end
$var reg 32 R me_o_load_data [31:0] $end
$var reg 32 S me_o_load_data_d [31:0] $end
$var reg 11 T me_o_opcode [10:0] $end
$var reg 1 U me_o_rd $end
$var reg 5 V me_o_rd_addr [4:0] $end
$var reg 32 W me_o_rd_data [31:0] $end
$var reg 1 & me_o_rd_we $end
$var reg 1 % me_o_stall $end
$var reg 1 $ me_o_stb $end
$var reg 5 X me_o_store_addr [4:0] $end
$var reg 32 Y me_o_store_data [31:0] $end
$var reg 1 ! me_o_we $end
$var reg 5 Z mem_addr_d [4:0] $end
$var reg 1 [ pending_request $end
$var reg 5 \ rd_addr_d [4:0] $end
$var reg 1 ] rd_d $end
$var reg 32 ^ rd_data_d [31:0] $end
$var reg 1 _ rd_we_d $end
$var reg 32 ` store_data_aligned [31:0] $end
$var reg 32 a store_data_aligned_d [31:0] $end
$var reg 1 b we_d $end
$scope module m $end
$var wire 1 2 m_clk $end
$var wire 4 c m_i_byte_enable [3:0] $end
$var wire 1 - m_i_cyc $end
$var wire 32 d m_i_data_store [31:0] $end
$var wire 5 e m_i_load_addr [4:0] $end
$var wire 1 U m_i_rd $end
$var wire 1 $ m_i_stb $end
$var wire 5 f m_i_store_addr [4:0] $end
$var wire 1 ! m_i_we $end
$var wire 1 ; m_rst $end
$var wire 32 g mask [31:0] $end
$var parameter 32 h AWIDTH $end
$var parameter 37 i DEPTH $end
$var parameter 32 j DWIDTH $end
$var reg 32 k data_reg [31:0] $end
$var reg 5 l load_addr_reg [4:0] $end
$var reg 1 F m_o_ack $end
$var reg 32 m m_o_read_data [31:0] $end
$var reg 1 n m_o_stall $end
$var reg 32 o mask_reg [31:0] $end
$var reg 1 p rd_reg $end
$var reg 1 q req_active $end
$var reg 5 r store_addr_reg [4:0] $end
$var reg 1 s we_reg $end
$var integer 32 t i [31:0] $end
$upscope $end
$upscope $end
$scope task do_reset $end
$upscope $end
$scope task do_rtype $end
$var reg 5 u rd_addr [4:0] $end
$var reg 32 v rd_data [31:0] $end
$upscope $end
$scope task do_store $end
$var reg 5 w addr [4:0] $end
$var reg 32 x data [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 j
b100000 i
b101 h
b11 J
b100000 I
b101 H
b11 1
b100000 0
b101 /
$end
#0
$dumpvars
bx x
bx w
bx v
bx u
b100000 t
xs
bx r
0q
xp
bx o
0n
b0 m
bx l
bx k
b0 g
b0 f
b0 e
b0 d
b0 c
0b
b0 a
b0 `
0_
b0 ^
0]
b0 \
0[
b0 Z
b0 Y
b0 X
b0 W
b0 V
0U
b0 T
b0 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 G
0F
b0 E
b0 D
b0 C
0B
b0 A
b0 @
b0 ?
b0 >
bz =
b0 <
0;
0:
b0 9
b0 8
b0 7
b0 6
05
x4
b0 3
02
0.
0-
0,
b0 +
b0 *
b0 )
b0 (
b0 '
0&
0%
0$
b0 #
b0 "
0!
$end
#5
b100000 t
12
#10
02
#15
b100000 t
12
#20
b10 #
b10 X
b10 f
b10 D
b10 G
b11 )
b11 T
1$
1-
1!
02
14
b1110 9
b1110 A
b1010 3
b1010 <
b11 6
b11 >
b1110 x
b1010 w
1;
#25
1.
1q
0p
1s
b0 o
b0 k
b10 r
b0 l
b1010 ^
b11 \
b0 #
b0 X
b0 f
1_
0$
0-
0!
b11000000111001 8
b11000000111001 @
b11 7
b11 ?
b0 6
b0 >
b11000000111001 v
b11 u
14
12
#30
02
#35
0q
1F
1n
0.
04
12
#40
02
#45
0_
b1010 '
b1010 W
1&
b11 (
b11 V
b0 )
b0 T
0n
0F
12
#50
02
#55
12
#60
02
#65
12
