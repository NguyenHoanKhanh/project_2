$date
	Fri Aug 08 00:18:49 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_instruction_fetch $end
$var wire 32 ! f_pc [31:0] $end
$var wire 1 " f_o_syn $end
$var wire 1 # f_o_stall $end
$var wire 32 $ f_o_instr [31:0] $end
$var wire 1 % f_o_flush $end
$var wire 1 & f_o_ce $end
$var wire 32 ' f_o_addr_instr [31:0] $end
$var parameter 32 ( AWIDTH_INSTR $end
$var parameter 32 ) IWIDTH $end
$var parameter 32 * PC_WIDTH $end
$var reg 32 + f_alu_pc_value [31:0] $end
$var reg 1 , f_change_pc $end
$var reg 1 - f_clk $end
$var reg 1 . f_i_ack $end
$var reg 1 / f_i_flush $end
$var reg 32 0 f_i_instr [31:0] $end
$var reg 1 1 f_i_stall $end
$var reg 1 2 f_rst $end
$scope module dut $end
$var wire 32 3 f_alu_pc_value [31:0] $end
$var wire 1 , f_change_pc $end
$var wire 1 - f_clk $end
$var wire 1 . f_i_ack $end
$var wire 1 / f_i_flush $end
$var wire 32 4 f_i_instr [31:0] $end
$var wire 1 1 f_i_stall $end
$var wire 1 " f_o_syn $end
$var wire 1 2 f_rst $end
$var wire 1 5 stall $end
$var parameter 32 6 AWIDTH_INSTR $end
$var parameter 32 7 IWIDTH $end
$var parameter 32 8 PC_WIDTH $end
$var reg 1 " ce $end
$var reg 1 9 ce_d $end
$var reg 32 : f_o_addr_instr [31:0] $end
$var reg 1 & f_o_ce $end
$var reg 1 % f_o_flush $end
$var reg 32 ; f_o_instr [31:0] $end
$var reg 1 # f_o_stall $end
$var reg 32 < f_pc [31:0] $end
$var reg 32 = i_addr_instr [31:0] $end
$var reg 32 > prev_pc [31:0] $end
$upscope $end
$scope task do_flush $end
$var integer 32 ? cycles [31:0] $end
$upscope $end
$scope task do_jump $end
$var reg 32 @ pc [31:0] $end
$upscope $end
$scope task do_reset $end
$var integer 32 A cycles [31:0] $end
$upscope $end
$scope task introduce_stall $end
$var integer 32 B cycles [31:0] $end
$upscope $end
$scope task send_instruction $end
$var reg 32 C instr [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 8
b100000 7
b100000 6
b100000 *
b100000 )
b100000 (
$end
#0
$dumpvars
bx C
bx B
b10 A
bx @
bx ?
b0 >
b0 =
b0 <
b0 ;
b0 :
09
15
b0 4
b0 3
02
01
b0 0
0/
0.
0-
0,
b0 +
b0 '
x&
0%
b0 $
0#
0"
b0 !
$end
#5
1-
#10
0-
#15
15
1"
0&
12
1-
#20
0-
#25
19
b100 !
b100 <
b10100000101000001010000010100000 $
b10100000101000001010000010100000 ;
0"
15
1.
b10100000101000001010000010100000 0
b10100000101000001010000010100000 4
b10100000101000001010000010100000 C
1-
#30
0-
#35
15
1"
0.
1-
#40
0-
#45
b1000 !
b1000 <
b100 >
b10110001101100011011000110110001 $
b10110001101100011011000110110001 ;
0"
15
1.
b10110001101100011011000110110001 0
b10110001101100011011000110110001 4
b10110001101100011011000110110001 C
1-
#50
0-
#55
15
1"
0.
1-
#60
0-
#65
b1100 !
b1100 <
b1000 >
b11000010110000101100001011000010 $
b11000010110000101100001011000010 ;
b100 =
0"
15
1.
b11000010110000101100001011000010 0
b11000010110000101100001011000010 4
b11000010110000101100001011000010 C
1-
#70
0-
#75
15
1"
0.
1-
#80
0-
#85
b100 '
b100 :
b1000 =
11
b11 B
1-
#90
0-
#95
b1000 '
b1000 :
1-
#100
0-
#105
1-
#110
0-
#115
01
1-
#120
0-
#125
b10000 !
b10000 <
b1100 >
b11010011110100111101001111010011 $
b11010011110100111101001111010011 ;
0"
15
1.
b11010011110100111101001111010011 0
b11010011110100111101001111010011 4
b11010011110100111101001111010011 C
1-
#130
0-
#135
15
1"
0.
1-
#140
0-
#145
b100000000 !
b100000000 <
b10000 >
b1100 =
0"
15
1.
1,
b100000000 +
b100000000 3
b100000000 @
1-
#150
0-
#155
15
1"
0.
0,
1-
#160
0-
#165
b1100 '
b1100 :
b10000 =
b11010011110100111101001111010011 $
b11010011110100111101001111010011 ;
0%
1#
0"
1/
b10 ?
1-
#170
0-
#175
b0 $
b0 ;
1%
1-
#180
0-
#185
1"
0/
1-
#190
0-
#195
b100000100 !
b100000100 <
b100000000 >
0%
b11100100111001001110010011100100 $
b11100100111001001110010011100100 ;
b10000 '
b10000 :
1.
b11100100111001001110010011100100 0
b11100100111001001110010011100100 4
b11100100111001001110010011100100 C
1-
#200
0-
#205
b100000000 =
0.
1-
#210
0-
#215
b100001000 !
b100001000 <
b100000100 >
b11110101111101011111010111110101 $
b11110101111101011111010111110101 ;
b100000000 '
b100000000 :
1.
b11110101111101011111010111110101 0
b11110101111101011111010111110101 4
b11110101111101011111010111110101 C
1-
#220
0-
#225
b100000100 =
0.
1-
#230
0-
#235
b100000100 '
b100000100 :
1-
#240
0-
#245
1-
#250
0-
#255
1-
